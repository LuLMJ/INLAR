{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nexport class UserService {\n  constructor(http, cookie) {\n    this.http = http;\n    this.cookie = cookie;\n    this.API_URL = environment.API_URL;\n  }\n  signupUser(requestDatas) {\n    return this.http.post(`${this.API_URL}/user`, requestDatas);\n  }\n  authUser(requestDatas) {\n    return this.http.post(`${this.API_URL}/auth`, requestDatas);\n  }\n  isLoggedIn() {\n    const JWT_TOKEN = this.cookie.get('USER_INFO');\n    return JWT_TOKEN ? true : false;\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAQA,SAASA,WAAW,QAAQ,8BAA8B;;;;AAK1D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB,EAAUC,MAAqB;IAA/C,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAF5C,YAAO,GAAGJ,WAAW,CAACK,OAAO;EAEiC;EAEtEC,UAAU,CAACC,YAA+B;IACxC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CACnB,GAAG,IAAI,CAACH,OAAO,OAAO,EACtBE,YAAY,CACb;EACH;EAEAE,QAAQ,CAACF,YAAyB;IAChC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAe,GAAG,IAAI,CAACH,OAAO,OAAO,EAAEE,YAAY,CAAC;EAC3E;EAEAG,UAAU;IACR,MAAMC,SAAS,GAAG,IAAI,CAACP,MAAM,CAACQ,GAAG,CAAC,WAAW,CAAC;IAC9C,OAAOD,SAAS,GAAG,IAAI,GAAG,KAAK;EACjC;;AAnBWV,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAY,SAAXZ,WAAW;EAAAa,YAFV;AAAM","names":["environment","UserService","constructor","http","cookie","API_URL","signupUser","requestDatas","post","authUser","isLoggedIn","JWT_TOKEN","get","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\CaioCoelho\\Desktop\\AULA-55\\src\\app\\services\\user\\user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\nimport { Observable } from 'rxjs';\nimport { SignupUserRequest } from 'src/app/models/interfaces/user/SignupUserRequest';\nimport { SignupUserResponse } from 'src/app/models/interfaces/user/SignupUserResponse';\nimport { AuthRequest } from 'src/app/models/interfaces/user/auth/AuthRequest';\nimport { AuthResponse } from 'src/app/models/interfaces/user/auth/AuthResponse';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  private API_URL = environment.API_URL;\n\n  constructor(private http: HttpClient, private cookie: CookieService) {}\n\n  signupUser(requestDatas: SignupUserRequest): Observable<SignupUserResponse> {\n    return this.http.post<SignupUserResponse>(\n      `${this.API_URL}/user`,\n      requestDatas\n    );\n  }\n\n  authUser(requestDatas: AuthRequest): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.API_URL}/auth`, requestDatas);\n  }\n\n  isLoggedIn(): boolean {\n    const JWT_TOKEN = this.cookie.get('USER_INFO');\n    return JWT_TOKEN ? true : false;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}