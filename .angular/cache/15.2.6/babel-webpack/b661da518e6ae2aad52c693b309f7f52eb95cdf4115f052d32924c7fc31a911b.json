{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { Subject, takeUntil } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"primeng/dynamicdialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"src/app/services/doador/doador.service\";\nexport class DoadorFormComponent {\n  constructor(ref, formBuilder, messageService, doadorService // Substitua pelo serviço real para doadores\n  ) {\n    this.ref = ref;\n    this.formBuilder = formBuilder;\n    this.messageService = messageService;\n    this.doadorService = doadorService;\n    this.destroy$ = new Subject();\n    this.doadorForm = this.formBuilder.group({\n      nome: ['', Validators.required],\n      tipoPessoa: ['F', 'J', Validators.required],\n      cpf: [''],\n      cnpj: [''],\n      contato1: [''],\n      contato2: [''],\n      cep: [''],\n      logradouro: [''],\n      numero: [''],\n      complemento: [''],\n      bairro: [''],\n      cidade: [''],\n      siglaEstado: [''],\n      observacoes: [''],\n      ativo: [true] // Valor padrão 'true' para ativo, pode ser ajustado conforme necessidade\n    });\n  }\n\n  ngOnInit() {\n    // Se houver dados para edição, preencha o formulário com esses dados\n    const doadorData = this.ref.data;\n    if (doadorData) {\n      this.doadorForm.patchValue(doadorData);\n    }\n  }\n  handleSubmit() {\n    if (this.doadorForm.valid) {\n      const formData = this.doadorForm.value;\n      // Chame o serviço para criar ou editar o doador\n      if (formData.IDDOADOR) {\n        // Se existir IDDOADOR, é uma edição\n        this.doadorService.editDoador(formData).pipe(takeUntil(this.destroy$)).subscribe({\n          next: () => {\n            this.handleSuccessMessage('Doador editado com sucesso!');\n          },\n          error: () => {\n            this.handleErrorMessage('Erro ao editar doador!');\n          }\n        });\n      } else {\n        // Caso contrário, é uma criação\n        this.doadorService.createDoador(formData).pipe(takeUntil(this.destroy$)).subscribe({\n          next: () => {\n            this.handleSuccessMessage('Doador criado com sucesso!');\n          },\n          error: () => {\n            this.handleErrorMessage('Erro ao criar doador!');\n          }\n        });\n      }\n    } else {\n      this.handleErrorMessage('Formulário inválido. Verifique os campos obrigatórios.');\n    }\n  }\n  handleSuccessMessage(detail) {\n    this.doadorForm.reset();\n    this.messageService.add({\n      severity: 'success',\n      summary: 'Sucesso',\n      detail: detail,\n      life: 3000\n    });\n  }\n  handleErrorMessage(detail) {\n    this.messageService.add({\n      severity: 'error',\n      summary: 'Erro',\n      detail: detail,\n      life: 3000\n    });\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\nDoadorFormComponent.ɵfac = function DoadorFormComponent_Factory(t) {\n  return new (t || DoadorFormComponent)(i0.ɵɵdirectiveInject(i1.DynamicDialogConfig), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.MessageService), i0.ɵɵdirectiveInject(i4.DoadorService));\n};\nDoadorFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DoadorFormComponent,\n  selectors: [[\"app-doador-form\"]],\n  decls: 2,\n  vars: 0,\n  template: function DoadorFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \" beneficiario-form works!\\n\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AACA,SAAsBA,UAAU,QAAmB,gBAAgB;AAGnE,SAASC,OAAO,EAAEC,SAAS,QAAQ,MAAM;;;;;;AASzC,OAAM,MAAOC,mBAAmB;EAK9BC,YACSC,GAAwB,EACvBC,WAAwB,EACxBC,cAA8B,EAC9BC,aAA4B,CAAC;EAAA;IAH9B,QAAG,GAAHH,GAAG;IACF,gBAAW,GAAXC,WAAW;IACX,mBAAc,GAAdC,cAAc;IACd,kBAAa,GAAbC,aAAa;IARN,aAAQ,GAAkB,IAAIP,OAAO,EAAE;IAUtD,IAAI,CAACQ,UAAU,GAAG,IAAI,CAACH,WAAW,CAACI,KAAK,CAAC;MACvCC,IAAI,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACY,QAAQ,CAAC;MAC/BC,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,EAAEb,UAAU,CAACY,QAAQ,CAAC;MAC3CE,GAAG,EAAE,CAAC,EAAE,CAAC;MACTC,IAAI,EAAE,CAAC,EAAE,CAAC;MACVC,QAAQ,EAAE,CAAC,EAAE,CAAC;MACdC,QAAQ,EAAE,CAAC,EAAE,CAAC;MACdC,GAAG,EAAE,CAAC,EAAE,CAAC;MACTC,UAAU,EAAE,CAAC,EAAE,CAAC;MAChBC,MAAM,EAAE,CAAC,EAAE,CAAC;MACZC,WAAW,EAAE,CAAC,EAAE,CAAC;MACjBC,MAAM,EAAE,CAAC,EAAE,CAAC;MACZC,MAAM,EAAE,CAAC,EAAE,CAAC;MACZC,WAAW,EAAE,CAAC,EAAE,CAAC;MACjBC,WAAW,EAAE,CAAC,EAAE,CAAC;MACjBC,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC;KACf,CAAC;EACJ;;EAEAC,QAAQ;IACN;IACA,MAAMC,UAAU,GAAG,IAAI,CAACvB,GAAG,CAACwB,IAAI;IAChC,IAAID,UAAU,EAAE;MACd,IAAI,CAACnB,UAAU,CAACqB,UAAU,CAACF,UAAU,CAAC;;EAE1C;EAEAG,YAAY;IACV,IAAI,IAAI,CAACtB,UAAU,CAACuB,KAAK,EAAE;MACzB,MAAMC,QAAQ,GAAG,IAAI,CAACxB,UAAU,CAACyB,KAAe;MAEhD;MACA,IAAID,QAAQ,CAACE,QAAQ,EAAE;QACrB;QACA,IAAI,CAAC3B,aAAa,CAAC4B,UAAU,CAACH,QAAQ,CAAC,CAACI,IAAI,CAACnC,SAAS,CAAC,IAAI,CAACoC,QAAQ,CAAC,CAAC,CAACC,SAAS,CAAC;UAC/EC,IAAI,EAAE,MAAK;YACT,IAAI,CAACC,oBAAoB,CAAC,6BAA6B,CAAC;UAC1D,CAAC;UACDC,KAAK,EAAE,MAAK;YACV,IAAI,CAACC,kBAAkB,CAAC,wBAAwB,CAAC;UACnD;SACD,CAAC;OACH,MAAM;QACL;QACA,IAAI,CAACnC,aAAa,CAACoC,YAAY,CAACX,QAAQ,CAAC,CAACI,IAAI,CAACnC,SAAS,CAAC,IAAI,CAACoC,QAAQ,CAAC,CAAC,CAACC,SAAS,CAAC;UACjFC,IAAI,EAAE,MAAK;YACT,IAAI,CAACC,oBAAoB,CAAC,4BAA4B,CAAC;UACzD,CAAC;UACDC,KAAK,EAAE,MAAK;YACV,IAAI,CAACC,kBAAkB,CAAC,uBAAuB,CAAC;UAClD;SACD,CAAC;;KAEL,MAAM;MACL,IAAI,CAACA,kBAAkB,CAAC,wDAAwD,CAAC;;EAErF;EAEQF,oBAAoB,CAACI,MAAc;IACzC,IAAI,CAACpC,UAAU,CAACqC,KAAK,EAAE;IACvB,IAAI,CAACvC,cAAc,CAACwC,GAAG,CAAC;MACtBC,QAAQ,EAAE,SAAS;MACnBC,OAAO,EAAE,SAAS;MAClBJ,MAAM,EAAEA,MAAM;MACdK,IAAI,EAAE;KACP,CAAC;EACJ;EAEQP,kBAAkB,CAACE,MAAc;IACvC,IAAI,CAACtC,cAAc,CAACwC,GAAG,CAAC;MACtBC,QAAQ,EAAE,OAAO;MACjBC,OAAO,EAAE,MAAM;MACfJ,MAAM,EAAEA,MAAM;MACdK,IAAI,EAAE;KACP,CAAC;EACJ;EAEAC,WAAW;IACT,IAAI,CAACb,QAAQ,CAACE,IAAI,EAAE;IACpB,IAAI,CAACF,QAAQ,CAACc,QAAQ,EAAE;EAC1B;;AA3FWjD,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAAkD;EAAAC;EAAAC;EAAAC;IAAA;MCbhCC,yBAAG;MACDA,2CACF;MAAAA,iBAAI","names":["Validators","Subject","takeUntil","DoadorFormComponent","constructor","ref","formBuilder","messageService","doadorService","doadorForm","group","nome","required","tipoPessoa","cpf","cnpj","contato1","contato2","cep","logradouro","numero","complemento","bairro","cidade","siglaEstado","observacoes","ativo","ngOnInit","doadorData","data","patchValue","handleSubmit","valid","formData","value","IDDOADOR","editDoador","pipe","destroy$","subscribe","next","handleSuccessMessage","error","handleErrorMessage","createDoador","detail","reset","add","severity","summary","life","ngOnDestroy","complete","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\CaioCoelho\\Desktop\\AULA-55\\src\\app\\modules\\doador\\components\\doador-form\\doador-form.component.ts","C:\\Users\\CaioCoelho\\Desktop\\AULA-55\\src\\app\\modules\\doador\\components\\doador-form\\doador-form.component.html"],"sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { MessageService } from 'primeng/api';\nimport { DynamicDialogConfig } from 'primeng/dynamicdialog';\nimport { Subject, takeUntil } from 'rxjs';\nimport { Doador } from './doador.model'; // Importe o modelo de doador que você definiu\nimport { DoadorService } from 'src/app/services/doador/doador.service'; // Importe o serviço para criar/editar doadores\n\n@Component({\n  selector: 'app-doador-form',\n  templateUrl: './doador-form.component.html',\n  styleUrls: []\n})\nexport class DoadorFormComponent implements OnInit, OnDestroy {\n  private readonly destroy$: Subject<void> = new Subject();\n\n  public doadorForm: FormGroup;\n\n  constructor(\n    public ref: DynamicDialogConfig,\n    private formBuilder: FormBuilder,\n    private messageService: MessageService,\n    private doadorService: DoadorService // Substitua pelo serviço real para doadores\n  ) {\n    this.doadorForm = this.formBuilder.group({\n      nome: ['', Validators.required],\n      tipoPessoa: ['F', 'J', Validators.required], // Valor padrão 'F' para pessoa física, pode ser ajustado conforme necessidade\n      cpf: [''],\n      cnpj: [''],\n      contato1: [''],\n      contato2: [''],\n      cep: [''],\n      logradouro: [''],\n      numero: [''],\n      complemento: [''],\n      bairro: [''],\n      cidade: [''],\n      siglaEstado: [''],\n      observacoes: [''],\n      ativo: [true] // Valor padrão 'true' para ativo, pode ser ajustado conforme necessidade\n    });\n  }\n\n  ngOnInit(): void {\n    // Se houver dados para edição, preencha o formulário com esses dados\n    const doadorData = this.ref.data;\n    if (doadorData) {\n      this.doadorForm.patchValue(doadorData);\n    }\n  }\n\n  handleSubmit(): void {\n    if (this.doadorForm.valid) {\n      const formData = this.doadorForm.value as Doador;\n      \n      // Chame o serviço para criar ou editar o doador\n      if (formData.IDDOADOR) {\n        // Se existir IDDOADOR, é uma edição\n        this.doadorService.editDoador(formData).pipe(takeUntil(this.destroy$)).subscribe({\n          next: () => {\n            this.handleSuccessMessage('Doador editado com sucesso!');\n          },\n          error: () => {\n            this.handleErrorMessage('Erro ao editar doador!');\n          }\n        });\n      } else {\n        // Caso contrário, é uma criação\n        this.doadorService.createDoador(formData).pipe(takeUntil(this.destroy$)).subscribe({\n          next: () => {\n            this.handleSuccessMessage('Doador criado com sucesso!');\n          },\n          error: () => {\n            this.handleErrorMessage('Erro ao criar doador!');\n          }\n        });\n      }\n    } else {\n      this.handleErrorMessage('Formulário inválido. Verifique os campos obrigatórios.');\n    }\n  }\n\n  private handleSuccessMessage(detail: string): void {\n    this.doadorForm.reset();\n    this.messageService.add({\n      severity: 'success',\n      summary: 'Sucesso',\n      detail: detail,\n      life: 3000\n    });\n  }\n\n  private handleErrorMessage(detail: string): void {\n    this.messageService.add({\n      severity: 'error',\n      summary: 'Erro',\n      detail: detail,\n      life: 3000\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","<p>\n  beneficiario-form works!\n</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}