{"ast":null,"code":"import { Subject, takeUntil } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/products/products.service\";\nimport * as i2 from \"primeng/api\";\nimport * as i3 from \"src/app/shared/services/products/products-data-transfer.service\";\nimport * as i4 from \"primeng/card\";\nimport * as i5 from \"primeng/chart\";\nimport * as i6 from \"../../../../shared/components/toolbar-navigation/toolbar-navigation.component\";\nexport class DashboardHomeComponent {\n  constructor(productsService, messageService, productsDtService) {\n    this.productsService = productsService;\n    this.messageService = messageService;\n    this.productsDtService = productsDtService;\n    this.destroy$ = new Subject();\n    this.productsList = [];\n  }\n  ngOnInit() {\n    this.getProductsDatas();\n  }\n  getProductsDatas() {\n    this.productsService.getAllProducts().pipe(takeUntil(this.destroy$)).subscribe({\n      next: response => {\n        if (response.length > 0) {\n          this.productsList = response;\n          this.productsDtService.setProductsDatas(this.productsList);\n          this.setProductsChartConfig();\n        }\n      },\n      error: err => {\n        console.log(err);\n        this.messageService.add({\n          severity: 'error',\n          summary: 'Erro',\n          detail: 'Erro ao buscar produtos!',\n          life: 2500\n        });\n      }\n    });\n  }\n  setProductsChartConfig() {\n    if (this.productsList.length > 0) {\n      const documentStyle = getComputedStyle(document.documentElement);\n      const textColor = documentStyle.getPropertyValue('--text-color');\n      const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\n      const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\n      this.productsChartDatas = {\n        labels: this.productsList.map(element => element?.name),\n        datasets: [{\n          label: 'Quantidade',\n          backgroundColor: documentStyle.getPropertyValue('--indigo-400'),\n          borderColor: documentStyle.getPropertyValue('--indigo-400'),\n          hoverBackgroundColor: documentStyle.getPropertyValue('--indigo-500'),\n          data: this.productsList.map(element => element?.amount)\n        }]\n      };\n      this.productsChartOptions = {\n        maintainAspectRatio: false,\n        aspectRatio: 0.8,\n        plugins: {\n          legend: {\n            labels: {\n              color: textColor\n            }\n          }\n        },\n        scales: {\n          x: {\n            ticks: {\n              color: textColorSecondary,\n              font: {\n                weight: '500'\n              }\n            },\n            grid: {\n              color: surfaceBorder\n            }\n          },\n          y: {\n            ticks: {\n              color: textColorSecondary\n            },\n            grid: {\n              color: surfaceBorder\n            }\n          }\n        }\n      };\n    }\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\nDashboardHomeComponent.ɵfac = function DashboardHomeComponent_Factory(t) {\n  return new (t || DashboardHomeComponent)(i0.ɵɵdirectiveInject(i1.ProductsService), i0.ɵɵdirectiveInject(i2.MessageService), i0.ɵɵdirectiveInject(i3.ProductsDataTransferService));\n};\nDashboardHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DashboardHomeComponent,\n  selectors: [[\"app-dashboard-home\"]],\n  decls: 5,\n  vars: 2,\n  consts: [[1, \"grid\"], [1, \"col-12\"], [\"header\", \"Quantidade de produtos em estoque\", \"styleClass\", \"shadow-3 m-5 text-indigo-800\"], [\"type\", \"bar\", 3, \"data\", \"options\"]],\n  template: function DashboardHomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"app-toolbar-navigation\");\n      i0.ɵɵelementStart(1, \"div\", 0)(2, \"div\", 1)(3, \"p-card\", 2);\n      i0.ɵɵelement(4, \"p-chart\", 3);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"data\", ctx.productsChartDatas)(\"options\", ctx.productsChartOptions);\n    }\n  },\n  dependencies: [i4.Card, i5.UIChart, i6.ToolbarNavigationComponent],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Subject","takeUntil","DashboardHomeComponent","constructor","productsService","messageService","productsDtService","ngOnInit","getProductsDatas","getAllProducts","pipe","destroy$","subscribe","next","response","length","productsList","setProductsDatas","setProductsChartConfig","error","err","console","log","add","severity","summary","detail","life","documentStyle","getComputedStyle","document","documentElement","textColor","getPropertyValue","textColorSecondary","surfaceBorder","productsChartDatas","labels","map","element","name","datasets","label","backgroundColor","borderColor","hoverBackgroundColor","data","amount","productsChartOptions","maintainAspectRatio","aspectRatio","plugins","legend","color","scales","x","ticks","font","weight","grid","y","ngOnDestroy","complete","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\CaioCoelho\\Desktop\\AULA-55\\src\\app\\modules\\dashboard\\page\\dashboard-home\\dashboard-home.component.ts","C:\\Users\\CaioCoelho\\Desktop\\AULA-55\\src\\app\\modules\\dashboard\\page\\dashboard-home\\dashboard-home.component.html"],"sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ChartData, ChartOptions } from 'chart.js';\nimport { MessageService } from 'primeng/api';\nimport { Subject, takeUntil } from 'rxjs';\nimport { GetAllProductsResponse } from 'src/app/models/interfaces/products/response/GetAllProductsResponse';\nimport { ProductsService } from 'src/app/services/products/products.service';\nimport { ProductsDataTransferService } from 'src/app/shared/services/products/products-data-transfer.service';\n\n@Component({\n  selector: 'app-dashboard-home',\n  templateUrl: './dashboard-home.component.html',\n  styleUrls: [],\n})\nexport class DashboardHomeComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  public productsList: Array<GetAllProductsResponse> = [];\n\n  public productsChartDatas!: ChartData;\n  public productsChartOptions!: ChartOptions;\n\n  constructor(\n    private productsService: ProductsService,\n    private messageService: MessageService,\n    private productsDtService: ProductsDataTransferService\n  ) {}\n\n  ngOnInit(): void {\n    this.getProductsDatas();\n  }\n\n  getProductsDatas(): void {\n    this.productsService\n      .getAllProducts()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (response) => {\n          if (response.length > 0) {\n            this.productsList = response;\n            this.productsDtService.setProductsDatas(this.productsList);\n            this.setProductsChartConfig();\n          }\n        },\n        error: (err) => {\n          console.log(err);\n          this.messageService.add({\n            severity: 'error',\n            summary: 'Erro',\n            detail: 'Erro ao buscar produtos!',\n            life: 2500,\n          });\n        },\n      });\n  }\n\n  setProductsChartConfig(): void {\n    if (this.productsList.length > 0) {\n      const documentStyle = getComputedStyle(document.documentElement);\n      const textColor = documentStyle.getPropertyValue('--text-color');\n      const textColorSecondary = documentStyle.getPropertyValue(\n        '--text-color-secondary'\n      );\n      const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\n\n      this.productsChartDatas = {\n        labels: this.productsList.map((element) => element?.name),\n        datasets: [\n          {\n            label: 'Quantidade',\n            backgroundColor: documentStyle.getPropertyValue('--indigo-400'),\n            borderColor: documentStyle.getPropertyValue('--indigo-400'),\n            hoverBackgroundColor:\n              documentStyle.getPropertyValue('--indigo-500'),\n            data: this.productsList.map((element) => element?.amount),\n          },\n        ],\n      };\n\n      this.productsChartOptions = {\n        maintainAspectRatio: false,\n        aspectRatio: 0.8,\n        plugins: {\n          legend: {\n            labels: {\n              color: textColor,\n            },\n          },\n        },\n\n        scales: {\n          x: {\n            ticks: {\n              color: textColorSecondary,\n              font: {\n                weight: '500',\n              },\n            },\n            grid: {\n              color: surfaceBorder,\n            },\n          },\n          y: {\n            ticks: {\n              color: textColorSecondary,\n            },\n            grid: {\n              color: surfaceBorder,\n            },\n          },\n        },\n      };\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","<app-toolbar-navigation> </app-toolbar-navigation>\n\n<div class=\"grid\">\n  <div class=\"col-12\">\n    <!-- GRÁFICO DE PRODUTOS EM ESTOQUE -->\n    <p-card\n      header=\"Quantidade de produtos em estoque\"\n      styleClass=\"shadow-3 m-5 text-indigo-800\"\n    >\n      <p-chart\n        type=\"bar\"\n        [data]=\"productsChartDatas\"\n        [options]=\"productsChartOptions\"\n      ></p-chart>\n    </p-card>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}