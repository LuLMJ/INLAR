{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nexport class ProductsService {\n  constructor(http, cookie) {\n    this.http = http;\n    this.cookie = cookie;\n    this.API_URL = environment.API_URL;\n    this.JWT_TOKEN = this.cookie.get('USER_INFO');\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.JWT_TOKEN}`\n      })\n    };\n  }\n  getAllProducts() {\n    return this.http.get(`${this.API_URL}/products`, this.httpOptions).pipe(map(product => product.filter(data => data?.amount > 0)));\n  }\n  deleteProduct(product_id) {\n    return this.http.delete(`${this.API_URL}/product/delete`, {\n      ...this.httpOptions,\n      params: {\n        product_id: product_id\n      }\n    });\n  }\n  createProduct(requestDatas) {\n    return this.http.post(`${this.API_URL}/product`, requestDatas, this.httpOptions);\n  }\n  editProduct(requestDatas) {\n    return this.http.put(`${this.API_URL}/product/edit`, requestDatas, this.httpOptions);\n  }\n}\nProductsService.ɵfac = function ProductsService_Factory(t) {\n  return new (t || ProductsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService));\n};\nProductsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductsService,\n  factory: ProductsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAAqBC,GAAG,QAAQ,MAAM;AAMtC,SAASC,WAAW,QAAQ,8BAA8B;;;;AAK1D,OAAM,MAAOC,eAAe;EAU1BC,YAAoBC,IAAgB,EAAUC,MAAqB;IAA/C,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAT5C,YAAO,GAAGJ,WAAW,CAACK,OAAO;IAC7B,cAAS,GAAG,IAAI,CAACD,MAAM,CAACE,GAAG,CAAC,WAAW,CAAC;IACxC,gBAAW,GAAG;MACpBC,OAAO,EAAE,IAAIT,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClCU,aAAa,EAAE,UAAU,IAAI,CAACC,SAAS;OACxC;KACF;EAEqE;EAEtEC,cAAc;IACZ,OAAO,IAAI,CAACP,IAAI,CACbG,GAAG,CACF,GAAG,IAAI,CAACD,OAAO,WAAW,EAC1B,IAAI,CAACM,WAAW,CACjB,CACAC,IAAI,CAACb,GAAG,CAAEc,OAAO,IAAKA,OAAO,CAACC,MAAM,CAAEC,IAAI,IAAKA,IAAI,EAAEC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;EACvE;EAEAC,aAAa,CAACC,UAAkB;IAC9B,OAAO,IAAI,CAACf,IAAI,CAACgB,MAAM,CACrB,GAAG,IAAI,CAACd,OAAO,iBAAiB,EAChC;MACE,GAAG,IAAI,CAACM,WAAW;MACnBS,MAAM,EAAE;QACNF,UAAU,EAAEA;;KAEf,CACF;EACH;EAEAG,aAAa,CACXC,YAAkC;IAElC,OAAO,IAAI,CAACnB,IAAI,CAACoB,IAAI,CACnB,GAAG,IAAI,CAAClB,OAAO,UAAU,EACzBiB,YAAY,EACZ,IAAI,CAACX,WAAW,CACjB;EACH;EAEAa,WAAW,CAACF,YAAgC;IAC1C,OAAO,IAAI,CAACnB,IAAI,CAACsB,GAAG,CAClB,GAAG,IAAI,CAACpB,OAAO,eAAe,EAC9BiB,YAAY,EACZ,IAAI,CAACX,WAAW,CACjB;EACH;;AAjDWV,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAyB,SAAfzB,eAAe;EAAA0B,YAFd;AAAM","names":["HttpHeaders","map","environment","ProductsService","constructor","http","cookie","API_URL","get","headers","Authorization","JWT_TOKEN","getAllProducts","httpOptions","pipe","product","filter","data","amount","deleteProduct","product_id","delete","params","createProduct","requestDatas","post","editProduct","put","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\CaioCoelho\\Desktop\\AULA-55\\src\\app\\services\\products\\products.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\nimport { Observable, map } from 'rxjs';\nimport { CreateProductRequest } from 'src/app/models/interfaces/products/request/CreateProductRequest';\nimport { EditProductRequest } from 'src/app/models/interfaces/products/request/EditProductRequest';\nimport { CreateProductResponse } from 'src/app/models/interfaces/products/response/CreateProductResponse';\nimport { DeleteProductResponse } from 'src/app/models/interfaces/products/response/DeleteProductResponse';\nimport { GetAllProductsResponse } from 'src/app/models/interfaces/products/response/GetAllProductsResponse';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductsService {\n  private API_URL = environment.API_URL;\n  private JWT_TOKEN = this.cookie.get('USER_INFO');\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${this.JWT_TOKEN}`,\n    }),\n  };\n\n  constructor(private http: HttpClient, private cookie: CookieService) {}\n\n  getAllProducts(): Observable<Array<GetAllProductsResponse>> {\n    return this.http\n      .get<Array<GetAllProductsResponse>>(\n        `${this.API_URL}/products`,\n        this.httpOptions\n      )\n      .pipe(map((product) => product.filter((data) => data?.amount > 0)));\n  }\n\n  deleteProduct(product_id: string): Observable<DeleteProductResponse> {\n    return this.http.delete<DeleteProductResponse>(\n      `${this.API_URL}/product/delete`,\n      {\n        ...this.httpOptions,\n        params: {\n          product_id: product_id,\n        },\n      }\n    );\n  }\n\n  createProduct(\n    requestDatas: CreateProductRequest\n  ): Observable<CreateProductResponse> {\n    return this.http.post<CreateProductResponse>(\n      `${this.API_URL}/product`,\n      requestDatas,\n      this.httpOptions\n    );\n  }\n\n  editProduct(requestDatas: EditProductRequest): Observable<void> {\n    return this.http.put<void>(\n      `${this.API_URL}/product/edit`,\n      requestDatas,\n      this.httpOptions\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}