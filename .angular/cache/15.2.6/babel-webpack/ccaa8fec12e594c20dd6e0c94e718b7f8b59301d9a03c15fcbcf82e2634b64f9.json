{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nlet DoadorFormComponent = class DoadorFormComponent {\n  constructor(ref, formBuilder, messageService, doadorService) {\n    this.ref = ref;\n    this.formBuilder = formBuilder;\n    this.messageService = messageService;\n    this.doadorService = doadorService;\n    this.destroy$ = new Subject();\n    this.isEditing = false; // Flag para verificar se está editando um doador existente\n    this.doadorForm = this.formBuilder.group({\n      nome: ['', Validators.required],\n      tipoPessoa: ['F', Validators.required],\n      cpf: [''],\n      rg: [''],\n      genero: [''],\n      dataNascimento: [''],\n      cnpj: [''],\n      razaoSocial: [''],\n      contato1: [''],\n      contato2: [''],\n      cep: [''],\n      logradouro: [''],\n      numero: [''],\n      complemento: [''],\n      bairro: [''],\n      cidade: [''],\n      siglaEstado: ['', Validators.required],\n      observacoes: [''],\n      ativo: [true] // Valor padrão 'true' para ativo\n    });\n    // Lista de estados do Brasil\n    this.estados = [{\n      label: 'Acre',\n      value: 'AC'\n    }, {\n      label: 'Alagoas',\n      value: 'AL'\n    }, {\n      label: 'Amapá',\n      value: 'AP'\n    }, {\n      label: 'Amazonas',\n      value: 'AM'\n    }, {\n      label: 'Bahia',\n      value: 'BA'\n    }, {\n      label: 'Ceará',\n      value: 'CE'\n    }, {\n      label: 'Distrito Federal',\n      value: 'DF'\n    }, {\n      label: 'Espírito Santo',\n      value: 'ES'\n    }, {\n      label: 'Goiás',\n      value: 'GO'\n    }, {\n      label: 'Maranhão',\n      value: 'MA'\n    }, {\n      label: 'Mato Grosso',\n      value: 'MT'\n    }, {\n      label: 'Mato Grosso do Sul',\n      value: 'MS'\n    }, {\n      label: 'Minas Gerais',\n      value: 'MG'\n    }, {\n      label: 'Pará',\n      value: 'PA'\n    }, {\n      label: 'Paraíba',\n      value: 'PB'\n    }, {\n      label: 'Paraná',\n      value: 'PR'\n    }, {\n      label: 'Pernambuco',\n      value: 'PE'\n    }, {\n      label: 'Piauí',\n      value: 'PI'\n    }, {\n      label: 'Rio de Janeiro',\n      value: 'RJ'\n    }, {\n      label: 'Rio Grande do Norte',\n      value: 'RN'\n    }, {\n      label: 'Rio Grande do Sul',\n      value: 'RS'\n    }, {\n      label: 'Rondônia',\n      value: 'RO'\n    }, {\n      label: 'Roraima',\n      value: 'RR'\n    }, {\n      label: 'Santa Catarina',\n      value: 'SC'\n    }, {\n      label: 'São Paulo',\n      value: 'SP'\n    }, {\n      label: 'Sergipe',\n      value: 'SE'\n    }, {\n      label: 'Tocantins',\n      value: 'TO'\n    }];\n    // Lista de tipos de pessoa\n    this.tiposPessoa = [{\n      label: 'Pessoa Física',\n      value: 'F'\n    }, {\n      label: 'Pessoa Jurídica',\n      value: 'J'\n    }];\n    // Lista de gêneros\n    this.generos = [{\n      label: 'Masculino',\n      value: 'M'\n    }, {\n      label: 'Feminino',\n      value: 'F'\n    }, {\n      label: 'Outro',\n      value: 'O'\n    }];\n  }\n  ngOnInit() {\n    const doadorData = this.ref.data;\n    if (doadorData) {\n      this.isEditing = !!doadorData.id; // Verifica se há um ID para determinar se é edição\n      this.populateForm(doadorData);\n    }\n  }\n  handleSubmit() {\n    if (this.doadorForm.valid) {\n      const formData = this.doadorForm.value;\n      if (this.isEditing) {\n        this.editDoador(formData);\n      } else {\n        this.addDoador(formData);\n      }\n    } else {\n      this.handleErrorMessage('Formulário inválido. Verifique os campos obrigatórios.');\n    }\n  }\n  addDoador(formData) {\n    this.doadorService['createDoador'](formData).pipe(takeUntil(this.destroy$)).subscribe({\n      next: () => {\n        this.handleSuccessMessage('Doador criado com sucesso!');\n      },\n      error: () => {\n        this.handleErrorMessage('Erro ao criar doador!');\n      }\n    });\n  }\n  editDoador(formData) {\n    const editAction = {\n      action: 'edit',\n      id: formData.id,\n      doadorName: formData.nome // Ajuste conforme necessário para capturar o nome do doador\n    };\n\n    this.doadorService['editDoador'](editAction).pipe(takeUntil(this.destroy$)).subscribe({\n      next: () => {\n        this.handleSuccessMessage('Doador editado com sucesso!');\n      },\n      error: () => {\n        this.handleErrorMessage('Erro ao editar doador!');\n      }\n    });\n  }\n  populateForm(doadorData) {\n    this.doadorForm.patchValue({\n      nome: doadorData.nome,\n      cpf: doadorData.cpf,\n      rg: doadorData.rg,\n      genero: doadorData.genero,\n      dataNascimento: doadorData.dataNascimento,\n      cnpj: doadorData.cnpj,\n      razaoSocial: doadorData.razaoSocial,\n      contato1: doadorData.contato1,\n      contato2: doadorData.contato2,\n      cep: doadorData.cep,\n      logradouro: doadorData.logradouro,\n      numero: doadorData.numero,\n      complemento: doadorData.complemento,\n      bairro: doadorData.bairro,\n      cidade: doadorData.cidade,\n      siglaEstado: doadorData.siglaEstado,\n      observacoes: doadorData.observacoes,\n      ativo: doadorData.ativo\n    });\n  }\n  handleSuccessMessage(detail) {\n    this.doadorForm.reset();\n    this.messageService.add({\n      severity: 'success',\n      summary: 'Sucesso',\n      detail: detail,\n      life: 3000\n    });\n  }\n  handleErrorMessage(detail) {\n    this.messageService.add({\n      severity: 'error',\n      summary: 'Erro',\n      detail: detail,\n      life: 3000\n    });\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n};\nDoadorFormComponent = __decorate([Component({\n  selector: 'app-doador-form',\n  templateUrl: './doador-form.component.html',\n  styleUrls: []\n})], DoadorFormComponent);\nexport { DoadorFormComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","Subject","takeUntil","DoadorFormComponent","constructor","ref","formBuilder","messageService","doadorService","doadorForm","group","nome","required","tipoPessoa","cpf","rg","genero","dataNascimento","cnpj","razaoSocial","contato1","contato2","cep","logradouro","numero","complemento","bairro","cidade","siglaEstado","observacoes","ativo","estados","label","value","tiposPessoa","generos","ngOnInit","doadorData","data","isEditing","id","populateForm","handleSubmit","valid","formData","editDoador","addDoador","handleErrorMessage","pipe","destroy$","subscribe","next","handleSuccessMessage","error","editAction","action","doadorName","patchValue","detail","reset","add","severity","summary","life","ngOnDestroy","complete","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\CaioCoelho\\Desktop\\AULA-55\\src\\app\\modules\\doador\\page\\doador-home\\doador-home.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { MessageService } from 'primeng/api';\nimport { DynamicDialogConfig } from 'primeng/dynamicdialog';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DoadorService } from 'src/app/services/doador/doador.service';\nimport { GetDoadorResponse } from 'src/app/models/interfaces/doador/responses/GetDoadorResponse';\nimport { EditDoadorAction } from 'src/app/models/interfaces/doador/event/EditDoadorAction';\n\n@Component({\n  selector: 'app-doador-form',\n  templateUrl: './doador-form.component.html',\n  styleUrls: []\n})\nexport class DoadorFormComponent implements OnInit, OnDestroy {\n  private readonly destroy$: Subject<void> = new Subject();\n\n  public doadorForm: FormGroup;\n  public isEditing = false; // Flag para verificar se está editando um doador existente\n  public estados: any[]; // Lista de estados\n  public tiposPessoa: any[]; // Lista de tipos de pessoa\n  public generos: any[]; // Lista de gêneros\n\n  constructor(\n    public ref: DynamicDialogConfig,\n    private formBuilder: FormBuilder,\n    private messageService: MessageService,\n    private doadorService: DoadorService\n  ) {\n    this.doadorForm = this.formBuilder.group({\n      nome: ['', Validators.required],\n      tipoPessoa: ['F', Validators.required], // Valor padrão 'F' para pessoa física\n      cpf: [''],\n      rg: [''],\n      genero: [''],\n      dataNascimento: [''],\n      cnpj: [''],\n      razaoSocial: [''],\n      contato1: [''],\n      contato2: [''],\n      cep: [''],\n      logradouro: [''],\n      numero: [''],\n      complemento: [''],\n      bairro: [''],\n      cidade: [''],\n      siglaEstado: ['', Validators.required],\n      observacoes: [''],\n      ativo: [true] // Valor padrão 'true' para ativo\n    });\n\n    // Lista de estados do Brasil\n    this.estados = [\n      { label: 'Acre', value: 'AC' },\n      { label: 'Alagoas', value: 'AL' },\n      { label: 'Amapá', value: 'AP' },\n      { label: 'Amazonas', value: 'AM' },\n      { label: 'Bahia', value: 'BA' },\n      { label: 'Ceará', value: 'CE' },\n      { label: 'Distrito Federal', value: 'DF' },\n      { label: 'Espírito Santo', value: 'ES' },\n      { label: 'Goiás', value: 'GO' },\n      { label: 'Maranhão', value: 'MA' },\n      { label: 'Mato Grosso', value: 'MT' },\n      { label: 'Mato Grosso do Sul', value: 'MS' },\n      { label: 'Minas Gerais', value: 'MG' },\n      { label: 'Pará', value: 'PA' },\n      { label: 'Paraíba', value: 'PB' },\n      { label: 'Paraná', value: 'PR' },\n      { label: 'Pernambuco', value: 'PE' },\n      { label: 'Piauí', value: 'PI' },\n      { label: 'Rio de Janeiro', value: 'RJ' },\n      { label: 'Rio Grande do Norte', value: 'RN' },\n      { label: 'Rio Grande do Sul', value: 'RS' },\n      { label: 'Rondônia', value: 'RO' },\n      { label: 'Roraima', value: 'RR' },\n      { label: 'Santa Catarina', value: 'SC' },\n      { label: 'São Paulo', value: 'SP' },\n      { label: 'Sergipe', value: 'SE' },\n      { label: 'Tocantins', value: 'TO' }\n    ];\n\n    // Lista de tipos de pessoa\n    this.tiposPessoa = [\n      { label: 'Pessoa Física', value: 'F' },\n      { label: 'Pessoa Jurídica', value: 'J' }\n    ];\n\n    // Lista de gêneros\n    this.generos = [\n      { label: 'Masculino', value: 'M' },\n      { label: 'Feminino', value: 'F' },\n      { label: 'Outro', value: 'O' }\n    ];\n  }\n\n  ngOnInit(): void {\n    const doadorData = this.ref.data;\n\n    if (doadorData) {\n      this.isEditing = !!doadorData.id; // Verifica se há um ID para determinar se é edição\n      this.populateForm(doadorData);\n    }\n  }\n\n  handleSubmit(): void {\n    if (this.doadorForm.valid) {\n      const formData = this.doadorForm.value;\n\n      if (this.isEditing) {\n        this.editDoador(formData);\n      } else {\n        this.addDoador(formData);\n      }\n    } else {\n      this.handleErrorMessage('Formulário inválido. Verifique os campos obrigatórios.');\n    }\n  }\n\n  private addDoador(formData: any): void {\n    this.doadorService['createDoador'](formData).pipe(takeUntil(this.destroy$)).subscribe({\n      next: () => {\n        this.handleSuccessMessage('Doador criado com sucesso!');\n      },\n      error: () => {\n        this.handleErrorMessage('Erro ao criar doador!');\n      }\n    });\n  }\n\n  private editDoador(formData: any): void {\n    const editAction: EditDoadorAction = {\n      action: 'edit',\n      id: formData.id, // Supondo que o ID seja parte do formulário ou seja recuperado de outra forma\n      doadorName: formData.nome // Ajuste conforme necessário para capturar o nome do doador\n    };\n\n    this.doadorService['editDoador'](editAction).pipe(takeUntil(this.destroy$)).subscribe({\n      next: () => {\n        this.handleSuccessMessage('Doador editado com sucesso!');\n      },\n      error: () => {\n        this.handleErrorMessage('Erro ao editar doador!');\n      }\n    });\n  }\n\n  private populateForm(doadorData: GetDoadorResponse): void {\n    this.doadorForm.patchValue({\n      nome: doadorData.nome,\n      cpf: doadorData.cpf,\n      rg: doadorData.rg,\n      genero: doadorData.genero,\n      dataNascimento: doadorData.dataNascimento,\n      cnpj: doadorData.cnpj,\n      razaoSocial: doadorData.razaoSocial,\n      contato1: doadorData.contato1,\n      contato2: doadorData.contato2,\n      cep: doadorData.cep,\n      logradouro: doadorData.logradouro,\n      numero: doadorData.numero,\n      complemento: doadorData.complemento,\n      bairro: doadorData.bairro,\n      cidade: doadorData.cidade,\n      siglaEstado: doadorData.siglaEstado,\n      observacoes: doadorData.observacoes,\n      ativo: doadorData.ativo\n    });\n  }\n\n  private handleSuccessMessage(detail: string): void {\n    this.doadorForm.reset();\n    this.messageService.add({\n      severity: 'success',\n      summary: 'Sucesso',\n      detail: detail,\n      life: 3000\n    });\n  }\n\n  private handleErrorMessage(detail: string): void {\n    this.messageService.add({\n      severity: 'error',\n      summary: 'Erro',\n      detail: detail,\n      life: 3000\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}