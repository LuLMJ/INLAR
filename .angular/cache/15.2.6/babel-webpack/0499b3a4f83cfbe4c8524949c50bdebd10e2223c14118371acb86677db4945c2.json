{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.generate = exports.isValid = exports.strip = exports.format = exports.verifierDigit = void 0;\n// Reject common values.\nvar REJECT_LIST = [\"00000000000000\", \"11111111111111\", \"22222222222222\", \"33333333333333\", \"44444444444444\", \"55555555555555\", \"66666666666666\", \"77777777777777\", \"88888888888888\", \"99999999999999\"];\nvar STRICT_STRIP_REGEX = /[-\\/.]/g;\nvar LOOSE_STRIP_REGEX = /[^\\d]/g;\n/**\n * Compute the Verifier Digit (or \"Dígito Verificador (DV)\" in portuguese) for CNPJ.\n *\n * You can learn more about this on [wikipedia (pt-br)](https://pt.wikipedia.org/wiki/D%C3%ADgito_verificador)\n *\n * @export\n * @param {string} numbers the CNPJ string with only numbers.\n * @returns {number} the verifier digit.\n */\nfunction verifierDigit(numbers) {\n  var index = 2;\n  var reverse = numbers.split(\"\").reduce(function (buffer, number) {\n    return [parseInt(number, 10)].concat(buffer);\n  }, []);\n  var sum = reverse.reduce(function (buffer, number) {\n    buffer += number * index;\n    index = index === 9 ? 2 : index + 1;\n    return buffer;\n  }, 0);\n  var mod = sum % 11;\n  return mod < 2 ? 0 : 11 - mod;\n}\nexports.verifierDigit = verifierDigit;\n/**\n * Transform the input into a pretty CNPJ format.\n *\n * Example:\n * ```\n * format('54550752000155');\n * // Result: '54.550.752/0001-55'\n * ```\n *\n * @export\n * @param {string} cnpj the CNPJ.\n * @returns {string} the formatted CNPJ.\n */\nfunction format(cnpj) {\n  return strip(cnpj).replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\n}\nexports.format = format;\n/**\n * Remove some characters from the input.\n *\n * Example:\n * ```\n * strip('54550[752#0001..$55'); // Result: '54550752000155'\n * strip('54550[752#0001..$55', true); // Result: '54550[752#0001..$55' - Atention!\n * ```\n *\n * @export\n * @param {string} cnpj the CNPJ text.\n * @param {boolean} [isStrict] if `true`, it will remove only `.` and `-` characters.\n *                             Otherwise, it will remove all non-digit (`[^\\d]`) characters. Optional.\n * @returns {string} the stripped CNPJ.\n */\nfunction strip(cnpj, isStrict) {\n  if (isStrict === void 0) {\n    isStrict = false;\n  }\n  var regex = isStrict ? STRICT_STRIP_REGEX : LOOSE_STRIP_REGEX;\n  return (cnpj || \"\").toString().replace(regex, \"\");\n}\nexports.strip = strip;\n/**\n * Validate the CNPJ.\n *\n * @export\n * @param {string} cnpj the CNPJ number.\n * @param {boolean} [isStrict] if `true`, it will accept only `digits`, `.` and `-` characters. Optional.\n * @returns {boolean} `true` if CNPJ is valid. Otherwise, `false`.\n */\nfunction isValid(cnpj, isStrict) {\n  if (isStrict === void 0) {\n    isStrict = false;\n  }\n  var stripped = strip(cnpj, isStrict);\n  // CNPJ must be defined\n  if (!stripped) {\n    return false;\n  }\n  // CNPJ must have 14 chars\n  if (stripped.length !== 14) {\n    return false;\n  }\n  if (REJECT_LIST.includes(stripped)) {\n    return false;\n  }\n  var numbers = stripped.substr(0, 12);\n  numbers += verifierDigit(numbers);\n  numbers += verifierDigit(numbers);\n  return numbers.substr(-2) === stripped.substr(-2);\n}\nexports.isValid = isValid;\n/**\n * Generate a random CNPJ.\n *\n * @export\n * @param {boolean} [useFormat] if `true`, it will format using `.` and `-`. Optional.\n * @returns {string} the CNPJ.\n */\nfunction generate(useFormat) {\n  if (useFormat === void 0) {\n    useFormat = false;\n  }\n  var numbers = \"\";\n  for (var i = 0; i < 12; i += 1) {\n    numbers += Math.floor(Math.random() * 9);\n  }\n  numbers += verifierDigit(numbers);\n  numbers += verifierDigit(numbers);\n  return useFormat ? format(numbers) : numbers;\n}\nexports.generate = generate;","map":{"version":3,"names":["exports","__esModule","generate","isValid","strip","format","verifierDigit","REJECT_LIST","STRICT_STRIP_REGEX","LOOSE_STRIP_REGEX","numbers","index","reverse","split","reduce","buffer","number","parseInt","concat","sum","mod","cnpj","replace","isStrict","regex","toString","stripped","length","includes","substr","useFormat","i","Math","floor","random"],"sources":["C:/Users/CaioCoelho/Desktop/AULA-55/node_modules/@fnando/cnpj/es/index.js"],"sourcesContent":["\"use strict\";\nexports.__esModule = true;\nexports.generate = exports.isValid = exports.strip = exports.format = exports.verifierDigit = void 0;\n// Reject common values.\nvar REJECT_LIST = [\n    \"00000000000000\",\n    \"11111111111111\",\n    \"22222222222222\",\n    \"33333333333333\",\n    \"44444444444444\",\n    \"55555555555555\",\n    \"66666666666666\",\n    \"77777777777777\",\n    \"88888888888888\",\n    \"99999999999999\",\n];\nvar STRICT_STRIP_REGEX = /[-\\/.]/g;\nvar LOOSE_STRIP_REGEX = /[^\\d]/g;\n/**\n * Compute the Verifier Digit (or \"Dígito Verificador (DV)\" in portuguese) for CNPJ.\n *\n * You can learn more about this on [wikipedia (pt-br)](https://pt.wikipedia.org/wiki/D%C3%ADgito_verificador)\n *\n * @export\n * @param {string} numbers the CNPJ string with only numbers.\n * @returns {number} the verifier digit.\n */\nfunction verifierDigit(numbers) {\n    var index = 2;\n    var reverse = numbers\n        .split(\"\")\n        .reduce(function (buffer, number) { return [parseInt(number, 10)].concat(buffer); }, []);\n    var sum = reverse.reduce(function (buffer, number) {\n        buffer += number * index;\n        index = index === 9 ? 2 : index + 1;\n        return buffer;\n    }, 0);\n    var mod = sum % 11;\n    return mod < 2 ? 0 : 11 - mod;\n}\nexports.verifierDigit = verifierDigit;\n/**\n * Transform the input into a pretty CNPJ format.\n *\n * Example:\n * ```\n * format('54550752000155');\n * // Result: '54.550.752/0001-55'\n * ```\n *\n * @export\n * @param {string} cnpj the CNPJ.\n * @returns {string} the formatted CNPJ.\n */\nfunction format(cnpj) {\n    return strip(cnpj).replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\n}\nexports.format = format;\n/**\n * Remove some characters from the input.\n *\n * Example:\n * ```\n * strip('54550[752#0001..$55'); // Result: '54550752000155'\n * strip('54550[752#0001..$55', true); // Result: '54550[752#0001..$55' - Atention!\n * ```\n *\n * @export\n * @param {string} cnpj the CNPJ text.\n * @param {boolean} [isStrict] if `true`, it will remove only `.` and `-` characters.\n *                             Otherwise, it will remove all non-digit (`[^\\d]`) characters. Optional.\n * @returns {string} the stripped CNPJ.\n */\nfunction strip(cnpj, isStrict) {\n    if (isStrict === void 0) { isStrict = false; }\n    var regex = isStrict ? STRICT_STRIP_REGEX : LOOSE_STRIP_REGEX;\n    return (cnpj || \"\").toString().replace(regex, \"\");\n}\nexports.strip = strip;\n/**\n * Validate the CNPJ.\n *\n * @export\n * @param {string} cnpj the CNPJ number.\n * @param {boolean} [isStrict] if `true`, it will accept only `digits`, `.` and `-` characters. Optional.\n * @returns {boolean} `true` if CNPJ is valid. Otherwise, `false`.\n */\nfunction isValid(cnpj, isStrict) {\n    if (isStrict === void 0) { isStrict = false; }\n    var stripped = strip(cnpj, isStrict);\n    // CNPJ must be defined\n    if (!stripped) {\n        return false;\n    }\n    // CNPJ must have 14 chars\n    if (stripped.length !== 14) {\n        return false;\n    }\n    if (REJECT_LIST.includes(stripped)) {\n        return false;\n    }\n    var numbers = stripped.substr(0, 12);\n    numbers += verifierDigit(numbers);\n    numbers += verifierDigit(numbers);\n    return numbers.substr(-2) === stripped.substr(-2);\n}\nexports.isValid = isValid;\n/**\n * Generate a random CNPJ.\n *\n * @export\n * @param {boolean} [useFormat] if `true`, it will format using `.` and `-`. Optional.\n * @returns {string} the CNPJ.\n */\nfunction generate(useFormat) {\n    if (useFormat === void 0) { useFormat = false; }\n    var numbers = \"\";\n    for (var i = 0; i < 12; i += 1) {\n        numbers += Math.floor(Math.random() * 9);\n    }\n    numbers += verifierDigit(numbers);\n    numbers += verifierDigit(numbers);\n    return useFormat ? format(numbers) : numbers;\n}\nexports.generate = generate;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}