{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.generate = exports.isValid = exports.strip = exports.format = exports.verifierDigit = void 0;\n// Reject common values.\nvar REJECT_LIST = [\"00000000000\", \"11111111111\", \"22222222222\", \"33333333333\", \"44444444444\", \"55555555555\", \"66666666666\", \"77777777777\", \"88888888888\", \"99999999999\"];\nvar STRICT_STRIP_REGEX = /[.-]/g;\nvar LOOSE_STRIP_REGEX = /[^\\d]/g;\n/**\n * Compute the Verifier Digit (or \"Dígito Verificador (DV)\" in PT-BR).\n *\n * You can learn more about the algorithm on [wikipedia (pt-br)](https://pt.wikipedia.org/wiki/D%C3%ADgito_verificador)\n *\n * @export\n * @param {string} numbers a string with only numbers.\n * @returns {number} the verifier digit.\n */\nfunction verifierDigit(numbers) {\n  var numberList = numbers.split(\"\").map(function (number) {\n    return parseInt(number, 10);\n  });\n  var modulus = numberList.length + 1;\n  var multiplied = numberList.map(function (number, index) {\n    return number * (modulus - index);\n  });\n  var mod = multiplied.reduce(function (buffer, number) {\n    return buffer + number;\n  }) % 11;\n  return mod < 2 ? 0 : 11 - mod;\n}\nexports.verifierDigit = verifierDigit;\n/**\n * Transform the input into a pretty CPF format.\n *\n * Example:\n * ```\n * format('12345678901');\n * // Result: '123.456.789-01'\n * ```\n *\n * @export\n * @param {string} cpf the CPF.\n * @returns {string} the formatted CPF.\n */\nfunction format(cpf) {\n  return strip(cpf).replace(/^(\\d{3})(\\d{3})(\\d{3})(\\d{2})$/, \"$1.$2.$3-$4\");\n}\nexports.format = format;\n/**\n * Remove some characters from the `number` input.\n *\n * Example:\n * ```\n * strip('29537995593'); // Result: '29537995593'\n * strip('295.379.955-93'); // Result: '29537995593'\n * strip('295a379b9c5d59e3'); // Result: '29537995593'\n * strip('295a379b9c5d59e3', true); // Result: '295a379b9c5d59e3' - Attention!\n * ```\n *\n * @export\n * @param {string} cpf the CPF text.\n * @param {boolean} [isStrict] if `true`, it will remove only `.` and `-` characters.\n *                             Otherwise, it will remove all non-digit (`[^\\d]`) characters. Optional.\n * @returns {string} the stripped CPF.\n */\nfunction strip(cpf, isStrict) {\n  if (isStrict === void 0) {\n    isStrict = false;\n  }\n  var regex = isStrict ? STRICT_STRIP_REGEX : LOOSE_STRIP_REGEX;\n  return (cpf || \"\").toString().replace(regex, \"\");\n}\nexports.strip = strip;\n/**\n * Validate the CPF.\n *\n * @export\n * @param {string} cpf the CPF number.\n * @param {boolean} [isStrict] if `true`, it will accept only `digits`, `.` and `-` characters. Optional.\n * @returns {boolean} `true` if CPF is valid. Otherwise, `false`.\n */\nfunction isValid(cpf, isStrict) {\n  if (isStrict === void 0) {\n    isStrict = false;\n  }\n  var stripped = strip(cpf, isStrict);\n  // CPF must be defined\n  if (!stripped) {\n    return false;\n  }\n  // CPF must have 11 chars\n  if (stripped.length !== 11) {\n    return false;\n  }\n  if (REJECT_LIST.includes(stripped)) {\n    return false;\n  }\n  var numbers = stripped.substr(0, 9);\n  numbers += verifierDigit(numbers);\n  numbers += verifierDigit(numbers);\n  return numbers.substr(-2) === stripped.substr(-2);\n}\nexports.isValid = isValid;\n/**\n * Generate a random CPF.\n *\n * @export\n * @param {boolean} [useFormat] if `true`, it will format using `.` and `-`. Optional.\n * @returns {string} the CPF.\n */\nfunction generate(useFormat) {\n  if (useFormat === void 0) {\n    useFormat = false;\n  }\n  var numbers = \"\";\n  for (var i = 0; i < 9; i += 1) {\n    numbers += Math.floor(Math.random() * 9);\n  }\n  numbers += verifierDigit(numbers);\n  numbers += verifierDigit(numbers);\n  return useFormat ? format(numbers) : numbers;\n}\nexports.generate = generate;","map":{"version":3,"names":["exports","__esModule","generate","isValid","strip","format","verifierDigit","REJECT_LIST","STRICT_STRIP_REGEX","LOOSE_STRIP_REGEX","numbers","numberList","split","map","number","parseInt","modulus","length","multiplied","index","mod","reduce","buffer","cpf","replace","isStrict","regex","toString","stripped","includes","substr","useFormat","i","Math","floor","random"],"sources":["C:/Users/CaioCoelho/Desktop/AULA-55/node_modules/@fnando/cpf/es/index.js"],"sourcesContent":["\"use strict\";\nexports.__esModule = true;\nexports.generate = exports.isValid = exports.strip = exports.format = exports.verifierDigit = void 0;\n// Reject common values.\nvar REJECT_LIST = [\n    \"00000000000\",\n    \"11111111111\",\n    \"22222222222\",\n    \"33333333333\",\n    \"44444444444\",\n    \"55555555555\",\n    \"66666666666\",\n    \"77777777777\",\n    \"88888888888\",\n    \"99999999999\",\n];\nvar STRICT_STRIP_REGEX = /[.-]/g;\nvar LOOSE_STRIP_REGEX = /[^\\d]/g;\n/**\n * Compute the Verifier Digit (or \"Dígito Verificador (DV)\" in PT-BR).\n *\n * You can learn more about the algorithm on [wikipedia (pt-br)](https://pt.wikipedia.org/wiki/D%C3%ADgito_verificador)\n *\n * @export\n * @param {string} numbers a string with only numbers.\n * @returns {number} the verifier digit.\n */\nfunction verifierDigit(numbers) {\n    var numberList = numbers.split(\"\").map(function (number) { return parseInt(number, 10); });\n    var modulus = numberList.length + 1;\n    var multiplied = numberList.map(function (number, index) { return number * (modulus - index); });\n    var mod = multiplied.reduce(function (buffer, number) { return buffer + number; }) % 11;\n    return mod < 2 ? 0 : 11 - mod;\n}\nexports.verifierDigit = verifierDigit;\n/**\n * Transform the input into a pretty CPF format.\n *\n * Example:\n * ```\n * format('12345678901');\n * // Result: '123.456.789-01'\n * ```\n *\n * @export\n * @param {string} cpf the CPF.\n * @returns {string} the formatted CPF.\n */\nfunction format(cpf) {\n    return strip(cpf).replace(/^(\\d{3})(\\d{3})(\\d{3})(\\d{2})$/, \"$1.$2.$3-$4\");\n}\nexports.format = format;\n/**\n * Remove some characters from the `number` input.\n *\n * Example:\n * ```\n * strip('29537995593'); // Result: '29537995593'\n * strip('295.379.955-93'); // Result: '29537995593'\n * strip('295a379b9c5d59e3'); // Result: '29537995593'\n * strip('295a379b9c5d59e3', true); // Result: '295a379b9c5d59e3' - Attention!\n * ```\n *\n * @export\n * @param {string} cpf the CPF text.\n * @param {boolean} [isStrict] if `true`, it will remove only `.` and `-` characters.\n *                             Otherwise, it will remove all non-digit (`[^\\d]`) characters. Optional.\n * @returns {string} the stripped CPF.\n */\nfunction strip(cpf, isStrict) {\n    if (isStrict === void 0) { isStrict = false; }\n    var regex = isStrict ? STRICT_STRIP_REGEX : LOOSE_STRIP_REGEX;\n    return (cpf || \"\").toString().replace(regex, \"\");\n}\nexports.strip = strip;\n/**\n * Validate the CPF.\n *\n * @export\n * @param {string} cpf the CPF number.\n * @param {boolean} [isStrict] if `true`, it will accept only `digits`, `.` and `-` characters. Optional.\n * @returns {boolean} `true` if CPF is valid. Otherwise, `false`.\n */\nfunction isValid(cpf, isStrict) {\n    if (isStrict === void 0) { isStrict = false; }\n    var stripped = strip(cpf, isStrict);\n    // CPF must be defined\n    if (!stripped) {\n        return false;\n    }\n    // CPF must have 11 chars\n    if (stripped.length !== 11) {\n        return false;\n    }\n    if (REJECT_LIST.includes(stripped)) {\n        return false;\n    }\n    var numbers = stripped.substr(0, 9);\n    numbers += verifierDigit(numbers);\n    numbers += verifierDigit(numbers);\n    return numbers.substr(-2) === stripped.substr(-2);\n}\nexports.isValid = isValid;\n/**\n * Generate a random CPF.\n *\n * @export\n * @param {boolean} [useFormat] if `true`, it will format using `.` and `-`. Optional.\n * @returns {string} the CPF.\n */\nfunction generate(useFormat) {\n    if (useFormat === void 0) { useFormat = false; }\n    var numbers = \"\";\n    for (var i = 0; i < 9; i += 1) {\n        numbers += Math.floor(Math.random() * 9);\n    }\n    numbers += verifierDigit(numbers);\n    numbers += verifierDigit(numbers);\n    return useFormat ? format(numbers) : numbers;\n}\nexports.generate = generate;\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACE,QAAQ,GAAGF,OAAO,CAACG,OAAO,GAAGH,OAAO,CAACI,KAAK,GAAGJ,OAAO,CAACK,MAAM,GAAGL,OAAO,CAACM,aAAa,GAAG,KAAK,CAAC;AACpG;AACA,IAAIC,WAAW,GAAG,CACd,aAAa,EACb,aAAa,EACb,aAAa,EACb,aAAa,EACb,aAAa,EACb,aAAa,EACb,aAAa,EACb,aAAa,EACb,aAAa,EACb,aAAa,CAChB;AACD,IAAIC,kBAAkB,GAAG,OAAO;AAChC,IAAIC,iBAAiB,GAAG,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASH,aAAa,CAACI,OAAO,EAAE;EAC5B,IAAIC,UAAU,GAAGD,OAAO,CAACE,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,UAAUC,MAAM,EAAE;IAAE,OAAOC,QAAQ,CAACD,MAAM,EAAE,EAAE,CAAC;EAAE,CAAC,CAAC;EAC1F,IAAIE,OAAO,GAAGL,UAAU,CAACM,MAAM,GAAG,CAAC;EACnC,IAAIC,UAAU,GAAGP,UAAU,CAACE,GAAG,CAAC,UAAUC,MAAM,EAAEK,KAAK,EAAE;IAAE,OAAOL,MAAM,IAAIE,OAAO,GAAGG,KAAK,CAAC;EAAE,CAAC,CAAC;EAChG,IAAIC,GAAG,GAAGF,UAAU,CAACG,MAAM,CAAC,UAAUC,MAAM,EAAER,MAAM,EAAE;IAAE,OAAOQ,MAAM,GAAGR,MAAM;EAAE,CAAC,CAAC,GAAG,EAAE;EACvF,OAAOM,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAGA,GAAG;AACjC;AACApB,OAAO,CAACM,aAAa,GAAGA,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,MAAM,CAACkB,GAAG,EAAE;EACjB,OAAOnB,KAAK,CAACmB,GAAG,CAAC,CAACC,OAAO,CAAC,gCAAgC,EAAE,aAAa,CAAC;AAC9E;AACAxB,OAAO,CAACK,MAAM,GAAGA,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,KAAK,CAACmB,GAAG,EAAEE,QAAQ,EAAE;EAC1B,IAAIA,QAAQ,KAAK,KAAK,CAAC,EAAE;IAAEA,QAAQ,GAAG,KAAK;EAAE;EAC7C,IAAIC,KAAK,GAAGD,QAAQ,GAAGjB,kBAAkB,GAAGC,iBAAiB;EAC7D,OAAO,CAACc,GAAG,IAAI,EAAE,EAAEI,QAAQ,EAAE,CAACH,OAAO,CAACE,KAAK,EAAE,EAAE,CAAC;AACpD;AACA1B,OAAO,CAACI,KAAK,GAAGA,KAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,OAAO,CAACoB,GAAG,EAAEE,QAAQ,EAAE;EAC5B,IAAIA,QAAQ,KAAK,KAAK,CAAC,EAAE;IAAEA,QAAQ,GAAG,KAAK;EAAE;EAC7C,IAAIG,QAAQ,GAAGxB,KAAK,CAACmB,GAAG,EAAEE,QAAQ,CAAC;EACnC;EACA,IAAI,CAACG,QAAQ,EAAE;IACX,OAAO,KAAK;EAChB;EACA;EACA,IAAIA,QAAQ,CAACX,MAAM,KAAK,EAAE,EAAE;IACxB,OAAO,KAAK;EAChB;EACA,IAAIV,WAAW,CAACsB,QAAQ,CAACD,QAAQ,CAAC,EAAE;IAChC,OAAO,KAAK;EAChB;EACA,IAAIlB,OAAO,GAAGkB,QAAQ,CAACE,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;EACnCpB,OAAO,IAAIJ,aAAa,CAACI,OAAO,CAAC;EACjCA,OAAO,IAAIJ,aAAa,CAACI,OAAO,CAAC;EACjC,OAAOA,OAAO,CAACoB,MAAM,CAAC,CAAC,CAAC,CAAC,KAAKF,QAAQ,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC;AACrD;AACA9B,OAAO,CAACG,OAAO,GAAGA,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,QAAQ,CAAC6B,SAAS,EAAE;EACzB,IAAIA,SAAS,KAAK,KAAK,CAAC,EAAE;IAAEA,SAAS,GAAG,KAAK;EAAE;EAC/C,IAAIrB,OAAO,GAAG,EAAE;EAChB,KAAK,IAAIsB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;IAC3BtB,OAAO,IAAIuB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,CAAC,CAAC;EAC5C;EACAzB,OAAO,IAAIJ,aAAa,CAACI,OAAO,CAAC;EACjCA,OAAO,IAAIJ,aAAa,CAACI,OAAO,CAAC;EACjC,OAAOqB,SAAS,GAAG1B,MAAM,CAACK,OAAO,CAAC,GAAGA,OAAO;AAChD;AACAV,OAAO,CAACE,QAAQ,GAAGA,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}