{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { Subject, takeUntil } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"primeng/dynamicdialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"src/app/services/doador/doador.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"primeng/button\";\nimport * as i7 from \"primeng/inputtext\";\nimport * as i8 from \"primeng/inputtextarea\";\nfunction DoadorFormComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"input\", 19);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DoadorFormComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"input\", 20);\n    i0.ɵɵelementEnd();\n  }\n}\nexport class DoadorFormComponent {\n  constructor(ref, formBuilder, messageService, doadorService) {\n    this.ref = ref;\n    this.formBuilder = formBuilder;\n    this.messageService = messageService;\n    this.doadorService = doadorService;\n    this.destroy$ = new Subject();\n    this.isEditing = false; // Flag para verificar se está editando um doador existente\n    this.doadorForm = this.formBuilder.group({\n      nome: ['', Validators.required],\n      tipoPessoa: ['F'],\n      cpf: [''],\n      cnpj: [''],\n      contato1: [''],\n      contato2: [''],\n      cep: [''],\n      logradouro: [''],\n      numero: [''],\n      complemento: [''],\n      bairro: [''],\n      cidade: [''],\n      siglaEstado: [''],\n      observacoes: [''],\n      ativo: [true] // Valor padrão 'true' para ativo, pode ser ajustado conforme necessidade\n    });\n  }\n\n  ngOnInit() {\n    const doadorData = this.ref.data;\n    if (doadorData) {\n      this.isEditing = !!doadorData.id; // Verifica se há um ID para determinar se é edição\n      this.populateForm(doadorData);\n    }\n  }\n  handleSubmit() {\n    if (this.doadorForm.valid) {\n      const formData = this.doadorForm.value;\n      if (this.isEditing) {\n        this.editDoador(formData);\n      } else {\n        this.addDoador(formData);\n      }\n    } else {\n      this.handleErrorMessage('Formulário inválido. Verifique os campos obrigatórios.');\n    }\n  }\n  addDoador(formData) {\n    this.doadorService['createDoador'](formData).pipe(takeUntil(this.destroy$)).subscribe({\n      next: () => {\n        this.handleSuccessMessage('Doador criado com sucesso!');\n      },\n      error: () => {\n        this.handleErrorMessage('Erro ao criar doador!');\n      }\n    });\n  }\n  editDoador(formData) {\n    const editAction = {\n      action: 'edit',\n      id: formData.id,\n      doadorName: formData.nome // Ajuste conforme necessário para capturar o nome do doador\n    };\n\n    this.doadorService['editDoador'](editAction).pipe(takeUntil(this.destroy$)).subscribe({\n      next: () => {\n        this.handleSuccessMessage('Doador editado com sucesso!');\n      },\n      error: () => {\n        this.handleErrorMessage('Erro ao editar doador!');\n      }\n    });\n  }\n  populateForm(doadorData) {\n    this.doadorForm.patchValue({\n      nome: doadorData.nome,\n      cpf: doadorData.cpf,\n      cnpj: doadorData.cnpj,\n      contato1: doadorData.contato1,\n      contato2: doadorData.contato2,\n      cep: doadorData.cep,\n      logradouro: doadorData.logradouro,\n      numero: doadorData.numero,\n      complemento: doadorData.complemento,\n      bairro: doadorData.bairro,\n      cidade: doadorData.cidade,\n      siglaEstado: doadorData.siglaEstado,\n      observacoes: doadorData.observacoes,\n      ativo: doadorData.ativo\n    });\n  }\n  handleSuccessMessage(detail) {\n    this.doadorForm.reset();\n    this.messageService.add({\n      severity: 'success',\n      summary: 'Sucesso',\n      detail: detail,\n      life: 3000\n    });\n  }\n  handleErrorMessage(detail) {\n    this.messageService.add({\n      severity: 'error',\n      summary: 'Erro',\n      detail: detail,\n      life: 3000\n    });\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\nDoadorFormComponent.ɵfac = function DoadorFormComponent_Factory(t) {\n  return new (t || DoadorFormComponent)(i0.ɵɵdirectiveInject(i1.DynamicDialogConfig), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.MessageService), i0.ɵɵdirectiveInject(i4.DoadorService));\n};\nDoadorFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DoadorFormComponent,\n  selectors: [[\"app-doador-form\"]],\n  decls: 23,\n  vars: 4,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"card\", \"flex\", \"flex-column\", \"md:flex-column\", \"gap-3\"], [\"pInputText\", \"\", \"placeholder\", \"Nome\", \"formControlName\", \"nome\"], [\"formControlName\", \"tipoPessoa\"], [\"value\", \"F\"], [\"value\", \"J\"], [4, \"ngIf\"], [\"pInputText\", \"\", \"placeholder\", \"Contato 1\", \"formControlName\", \"contato1\"], [\"pInputText\", \"\", \"placeholder\", \"Contato 2\", \"formControlName\", \"contato2\"], [\"pInputText\", \"\", \"placeholder\", \"CEP\", \"formControlName\", \"cep\"], [\"pInputText\", \"\", \"placeholder\", \"Logradouro\", \"formControlName\", \"logradouro\"], [\"pInputText\", \"\", \"placeholder\", \"N\\u00FAmero\", \"formControlName\", \"numero\"], [\"pInputText\", \"\", \"placeholder\", \"Complemento\", \"formControlName\", \"complemento\"], [\"pInputText\", \"\", \"placeholder\", \"Bairro\", \"formControlName\", \"bairro\"], [\"pInputText\", \"\", \"placeholder\", \"Cidade\", \"formControlName\", \"cidade\"], [\"pInputText\", \"\", \"placeholder\", \"Sigla Estado\", \"formControlName\", \"siglaEstado\"], [\"pInputTextarea\", \"\", \"placeholder\", \"Observa\\u00E7\\u00F5es\", \"formControlName\", \"observacoes\"], [1, \"flex\", \"flex-row\", \"justify-content-center\", \"align-content-center\", \"align-items-center\"], [\"type\", \"submit\", \"label\", \"Concluir\", 3, \"disabled\"], [\"pInputText\", \"\", \"placeholder\", \"CPF\", \"formControlName\", \"cpf\"], [\"pInputText\", \"\", \"placeholder\", \"CNPJ\", \"formControlName\", \"cnpj\"]],\n  template: function DoadorFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function DoadorFormComponent_Template_form_ngSubmit_1_listener() {\n        return ctx.handleSubmit();\n      });\n      i0.ɵɵelementStart(2, \"div\", 1);\n      i0.ɵɵelement(3, \"input\", 2);\n      i0.ɵɵelementStart(4, \"select\", 3)(5, \"option\", 4);\n      i0.ɵɵtext(6, \"Pessoa F\\u00EDsica\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"option\", 5);\n      i0.ɵɵtext(8, \"Pessoa Jur\\u00EDdica\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(9, DoadorFormComponent_div_9_Template, 2, 0, \"div\", 6);\n      i0.ɵɵtemplate(10, DoadorFormComponent_div_10_Template, 2, 0, \"div\", 6);\n      i0.ɵɵelement(11, \"input\", 7)(12, \"input\", 8)(13, \"input\", 9)(14, \"input\", 10)(15, \"input\", 11)(16, \"input\", 12)(17, \"input\", 13)(18, \"input\", 14)(19, \"input\", 15)(20, \"textarea\", 16);\n      i0.ɵɵelementStart(21, \"div\", 17);\n      i0.ɵɵelement(22, \"p-button\", 18);\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      let tmp_2_0;\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.doadorForm);\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.doadorForm.get(\"tipoPessoa\")) == null ? null : tmp_1_0.value) === \"F\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.doadorForm.get(\"tipoPessoa\")) == null ? null : tmp_2_0.value) === \"J\");\n      i0.ɵɵadvance(12);\n      i0.ɵɵproperty(\"disabled\", !ctx.doadorForm.valid);\n    }\n  },\n  dependencies: [i5.NgIf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i6.Button, i7.InputText, i8.InputTextarea],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","Subject","takeUntil","i0","DoadorFormComponent","constructor","ref","formBuilder","messageService","doadorService","doadorForm","group","nome","required","tipoPessoa","cpf","cnpj","contato1","contato2","cep","logradouro","numero","complemento","bairro","cidade","siglaEstado","observacoes","ativo","ngOnInit","doadorData","data","isEditing","id","populateForm","handleSubmit","valid","formData","value","editDoador","addDoador","handleErrorMessage","pipe","destroy$","subscribe","next","handleSuccessMessage","error","editAction","action","doadorName","patchValue","detail","reset","add","severity","summary","life","ngOnDestroy","complete","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\CaioCoelho\\Desktop\\AULA-55\\src\\app\\modules\\doador\\components\\doador-form\\doador-form.component.ts","C:\\Users\\CaioCoelho\\Desktop\\AULA-55\\src\\app\\modules\\doador\\components\\doador-form\\doador-form.component.html"],"sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { MessageService } from 'primeng/api';\nimport { DynamicDialogConfig } from 'primeng/dynamicdialog';\nimport { Subject, takeUntil } from 'rxjs';\nimport { DoadorService } from 'src/app/services/doador/doador.service';\nimport { GetDoadorResponse } from 'src/app/models/interfaces/doador/responses/GetDoadorResponse';\nimport { EditDoadorAction } from 'src/app/models/interfaces/doador/event/EditDoadorAction';\n\n@Component({\n  selector: 'app-doador-form',\n  templateUrl: './doador-form.component.html',\n  styleUrls: []\n})\nexport class DoadorFormComponent implements OnInit, OnDestroy {\n  private readonly destroy$: Subject<void> = new Subject();\n\n  public doadorForm: FormGroup;\n  public isEditing = false; // Flag para verificar se está editando um doador existente\n\n  constructor(\n    public ref: DynamicDialogConfig,\n    private formBuilder: FormBuilder,\n    private messageService: MessageService,\n    private doadorService: DoadorService\n  ) {\n    this.doadorForm = this.formBuilder.group({\n      nome: ['', Validators.required],\n      tipoPessoa: ['F'], // Valor padrão 'F' para pessoa física, pode ser ajustado conforme necessidade\n      cpf: [''],\n      cnpj: [''],\n      contato1: [''],\n      contato2: [''],\n      cep: [''],\n      logradouro: [''],\n      numero: [''],\n      complemento: [''],\n      bairro: [''],\n      cidade: [''],\n      siglaEstado: [''],\n      observacoes: [''],\n      ativo: [true] // Valor padrão 'true' para ativo, pode ser ajustado conforme necessidade\n    });\n  }\n\n  ngOnInit(): void {\n    const doadorData = this.ref.data;\n\n    if (doadorData) {\n      this.isEditing = !!doadorData.id; // Verifica se há um ID para determinar se é edição\n      this.populateForm(doadorData);\n    }\n  }\n\n  handleSubmit(): void {\n    if (this.doadorForm.valid) {\n      const formData = this.doadorForm.value;\n\n      if (this.isEditing) {\n        this.editDoador(formData);\n      } else {\n        this.addDoador(formData);\n      }\n    } else {\n      this.handleErrorMessage('Formulário inválido. Verifique os campos obrigatórios.');\n    }\n  }\n\n  private addDoador(formData: any): void {\n    this.doadorService['createDoador'](formData).pipe(takeUntil(this.destroy$)).subscribe({\n      next: () => {\n        this.handleSuccessMessage('Doador criado com sucesso!');\n      },\n      error: () => {\n        this.handleErrorMessage('Erro ao criar doador!');\n      }\n    });\n  }\n\n  private editDoador(formData: any): void {\n    const editAction: EditDoadorAction = {\n      action: 'edit',\n      id: formData.id, // Supondo que o ID seja parte do formulário ou seja recuperado de outra forma\n      doadorName: formData.nome // Ajuste conforme necessário para capturar o nome do doador\n    };\n\n    this.doadorService['editDoador'](editAction).pipe(takeUntil(this.destroy$)).subscribe({\n      next: () => {\n        this.handleSuccessMessage('Doador editado com sucesso!');\n      },\n      error: () => {\n        this.handleErrorMessage('Erro ao editar doador!');\n      }\n    });\n  }\n\n  private populateForm(doadorData: GetDoadorResponse): void {\n    this.doadorForm.patchValue({\n      nome: doadorData.nome,\n      cpf: doadorData.cpf,\n      cnpj: doadorData.cnpj,\n      contato1: doadorData.contato1,\n      contato2: doadorData.contato2,\n      cep: doadorData.cep,\n      logradouro: doadorData.logradouro,\n      numero: doadorData.numero,\n      complemento: doadorData.complemento,\n      bairro: doadorData.bairro,\n      cidade: doadorData.cidade,\n      siglaEstado: doadorData.siglaEstado,\n      observacoes: doadorData.observacoes,\n      ativo: doadorData.ativo\n    });\n  }\n\n  private handleSuccessMessage(detail: string): void {\n    this.doadorForm.reset();\n    this.messageService.add({\n      severity: 'success',\n      summary: 'Sucesso',\n      detail: detail,\n      life: 3000\n    });\n  }\n\n  private handleErrorMessage(detail: string): void {\n    this.messageService.add({\n      severity: 'error',\n      summary: 'Erro',\n      detail: detail,\n      life: 3000\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","<div>\n  <form [formGroup]=\"doadorForm\" (ngSubmit)=\"handleSubmit()\">\n    <div class=\"card flex flex-column md:flex-column gap-3\">\n      <input pInputText placeholder=\"Nome\" formControlName=\"nome\" />\n\n      <select formControlName=\"tipoPessoa\">\n        <option value=\"F\">Pessoa Física</option>\n        <option value=\"J\">Pessoa Jurídica</option>\n      </select>\n\n      <div *ngIf=\"doadorForm.get('tipoPessoa')?.value === 'F'\">\n        <input pInputText placeholder=\"CPF\" formControlName=\"cpf\" />\n      </div>\n\n      <div *ngIf=\"doadorForm.get('tipoPessoa')?.value === 'J'\">\n        <input pInputText placeholder=\"CNPJ\" formControlName=\"cnpj\" />\n      </div>\n\n      <input pInputText placeholder=\"Contato 1\" formControlName=\"contato1\" />\n      <input pInputText placeholder=\"Contato 2\" formControlName=\"contato2\" />\n      <input pInputText placeholder=\"CEP\" formControlName=\"cep\" />\n      <input pInputText placeholder=\"Logradouro\" formControlName=\"logradouro\" />\n      <input pInputText placeholder=\"Número\" formControlName=\"numero\" />\n      <input pInputText placeholder=\"Complemento\" formControlName=\"complemento\" />\n      <input pInputText placeholder=\"Bairro\" formControlName=\"bairro\" />\n      <input pInputText placeholder=\"Cidade\" formControlName=\"cidade\" />\n      <input pInputText placeholder=\"Sigla Estado\" formControlName=\"siglaEstado\" />\n      <textarea pInputTextarea placeholder=\"Observações\" formControlName=\"observacoes\"></textarea>\n\n      <div class=\"flex flex-row justify-content-center align-content-center align-items-center\">\n        <p-button [disabled]=\"!doadorForm.valid\" type=\"submit\" label=\"Concluir\"></p-button>\n      </div>\n    </div>\n  </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}