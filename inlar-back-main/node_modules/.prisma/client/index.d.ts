
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model beneficiario
 * 
 */
export type beneficiario = $Result.DefaultSelection<Prisma.$beneficiarioPayload>
/**
 * Model doador
 * 
 */
export type doador = $Result.DefaultSelection<Prisma.$doadorPayload>
/**
 * Model empresa
 * 
 */
export type empresa = $Result.DefaultSelection<Prisma.$empresaPayload>
/**
 * Model tipodoacao
 * 
 */
export type tipodoacao = $Result.DefaultSelection<Prisma.$tipodoacaoPayload>
/**
 * Model usuario
 * 
 */
export type usuario = $Result.DefaultSelection<Prisma.$usuarioPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Beneficiarios
 * const beneficiarios = await prisma.beneficiario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Beneficiarios
   * const beneficiarios = await prisma.beneficiario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.beneficiario`: Exposes CRUD operations for the **beneficiario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Beneficiarios
    * const beneficiarios = await prisma.beneficiario.findMany()
    * ```
    */
  get beneficiario(): Prisma.beneficiarioDelegate<ExtArgs>;

  /**
   * `prisma.doador`: Exposes CRUD operations for the **doador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doadors
    * const doadors = await prisma.doador.findMany()
    * ```
    */
  get doador(): Prisma.doadorDelegate<ExtArgs>;

  /**
   * `prisma.empresa`: Exposes CRUD operations for the **empresa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Empresas
    * const empresas = await prisma.empresa.findMany()
    * ```
    */
  get empresa(): Prisma.empresaDelegate<ExtArgs>;

  /**
   * `prisma.tipodoacao`: Exposes CRUD operations for the **tipodoacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tipodoacaos
    * const tipodoacaos = await prisma.tipodoacao.findMany()
    * ```
    */
  get tipodoacao(): Prisma.tipodoacaoDelegate<ExtArgs>;

  /**
   * `prisma.usuario`: Exposes CRUD operations for the **usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.usuarioDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    beneficiario: 'beneficiario',
    doador: 'doador',
    empresa: 'empresa',
    tipodoacao: 'tipodoacao',
    usuario: 'usuario'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'beneficiario' | 'doador' | 'empresa' | 'tipodoacao' | 'usuario'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      beneficiario: {
        payload: Prisma.$beneficiarioPayload<ExtArgs>
        fields: Prisma.beneficiarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.beneficiarioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$beneficiarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.beneficiarioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$beneficiarioPayload>
          }
          findFirst: {
            args: Prisma.beneficiarioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$beneficiarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.beneficiarioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$beneficiarioPayload>
          }
          findMany: {
            args: Prisma.beneficiarioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$beneficiarioPayload>[]
          }
          create: {
            args: Prisma.beneficiarioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$beneficiarioPayload>
          }
          createMany: {
            args: Prisma.beneficiarioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.beneficiarioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$beneficiarioPayload>
          }
          update: {
            args: Prisma.beneficiarioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$beneficiarioPayload>
          }
          deleteMany: {
            args: Prisma.beneficiarioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.beneficiarioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.beneficiarioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$beneficiarioPayload>
          }
          aggregate: {
            args: Prisma.BeneficiarioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBeneficiario>
          }
          groupBy: {
            args: Prisma.beneficiarioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BeneficiarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.beneficiarioCountArgs<ExtArgs>,
            result: $Utils.Optional<BeneficiarioCountAggregateOutputType> | number
          }
        }
      }
      doador: {
        payload: Prisma.$doadorPayload<ExtArgs>
        fields: Prisma.doadorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.doadorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doadorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.doadorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doadorPayload>
          }
          findFirst: {
            args: Prisma.doadorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doadorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.doadorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doadorPayload>
          }
          findMany: {
            args: Prisma.doadorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doadorPayload>[]
          }
          create: {
            args: Prisma.doadorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doadorPayload>
          }
          createMany: {
            args: Prisma.doadorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.doadorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doadorPayload>
          }
          update: {
            args: Prisma.doadorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doadorPayload>
          }
          deleteMany: {
            args: Prisma.doadorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.doadorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.doadorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doadorPayload>
          }
          aggregate: {
            args: Prisma.DoadorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDoador>
          }
          groupBy: {
            args: Prisma.doadorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DoadorGroupByOutputType>[]
          }
          count: {
            args: Prisma.doadorCountArgs<ExtArgs>,
            result: $Utils.Optional<DoadorCountAggregateOutputType> | number
          }
        }
      }
      empresa: {
        payload: Prisma.$empresaPayload<ExtArgs>
        fields: Prisma.empresaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.empresaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$empresaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.empresaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$empresaPayload>
          }
          findFirst: {
            args: Prisma.empresaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$empresaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.empresaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$empresaPayload>
          }
          findMany: {
            args: Prisma.empresaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$empresaPayload>[]
          }
          create: {
            args: Prisma.empresaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$empresaPayload>
          }
          createMany: {
            args: Prisma.empresaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.empresaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$empresaPayload>
          }
          update: {
            args: Prisma.empresaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$empresaPayload>
          }
          deleteMany: {
            args: Prisma.empresaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.empresaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.empresaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$empresaPayload>
          }
          aggregate: {
            args: Prisma.EmpresaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEmpresa>
          }
          groupBy: {
            args: Prisma.empresaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EmpresaGroupByOutputType>[]
          }
          count: {
            args: Prisma.empresaCountArgs<ExtArgs>,
            result: $Utils.Optional<EmpresaCountAggregateOutputType> | number
          }
        }
      }
      tipodoacao: {
        payload: Prisma.$tipodoacaoPayload<ExtArgs>
        fields: Prisma.tipodoacaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tipodoacaoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tipodoacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tipodoacaoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tipodoacaoPayload>
          }
          findFirst: {
            args: Prisma.tipodoacaoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tipodoacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tipodoacaoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tipodoacaoPayload>
          }
          findMany: {
            args: Prisma.tipodoacaoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tipodoacaoPayload>[]
          }
          create: {
            args: Prisma.tipodoacaoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tipodoacaoPayload>
          }
          createMany: {
            args: Prisma.tipodoacaoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.tipodoacaoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tipodoacaoPayload>
          }
          update: {
            args: Prisma.tipodoacaoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tipodoacaoPayload>
          }
          deleteMany: {
            args: Prisma.tipodoacaoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.tipodoacaoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.tipodoacaoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tipodoacaoPayload>
          }
          aggregate: {
            args: Prisma.TipodoacaoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTipodoacao>
          }
          groupBy: {
            args: Prisma.tipodoacaoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TipodoacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.tipodoacaoCountArgs<ExtArgs>,
            result: $Utils.Optional<TipodoacaoCountAggregateOutputType> | number
          }
        }
      }
      usuario: {
        payload: Prisma.$usuarioPayload<ExtArgs>
        fields: Prisma.usuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usuarioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usuarioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          findFirst: {
            args: Prisma.usuarioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usuarioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          findMany: {
            args: Prisma.usuarioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>[]
          }
          create: {
            args: Prisma.usuarioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          createMany: {
            args: Prisma.usuarioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usuarioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          update: {
            args: Prisma.usuarioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          deleteMany: {
            args: Prisma.usuarioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usuarioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usuarioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.usuarioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.usuarioCountArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model beneficiario
   */

  export type AggregateBeneficiario = {
    _count: BeneficiarioCountAggregateOutputType | null
    _avg: BeneficiarioAvgAggregateOutputType | null
    _sum: BeneficiarioSumAggregateOutputType | null
    _min: BeneficiarioMinAggregateOutputType | null
    _max: BeneficiarioMaxAggregateOutputType | null
  }

  export type BeneficiarioAvgAggregateOutputType = {
    IDBENEFICIARIO: number | null
  }

  export type BeneficiarioSumAggregateOutputType = {
    IDBENEFICIARIO: number | null
  }

  export type BeneficiarioMinAggregateOutputType = {
    IDBENEFICIARIO: number | null
    NOME: string | null
    DATANASC: Date | null
    TIPOPESSOA: string | null
    GENERO: string | null
    CPF: string | null
    RG: string | null
    CNPJ: string | null
    CONTATO1: string | null
    CONTATO2: string | null
    CEP: string | null
    LOGRADOUDO: string | null
    NUMERO: string | null
    COMPLEMENTO: string | null
    BAIRRO: string | null
    CIDADE: string | null
    SIGLAESTADO: string | null
    OBSERVACOES: string | null
    DATACAD: Date | null
    ATIVO: boolean | null
  }

  export type BeneficiarioMaxAggregateOutputType = {
    IDBENEFICIARIO: number | null
    NOME: string | null
    DATANASC: Date | null
    TIPOPESSOA: string | null
    GENERO: string | null
    CPF: string | null
    RG: string | null
    CNPJ: string | null
    CONTATO1: string | null
    CONTATO2: string | null
    CEP: string | null
    LOGRADOUDO: string | null
    NUMERO: string | null
    COMPLEMENTO: string | null
    BAIRRO: string | null
    CIDADE: string | null
    SIGLAESTADO: string | null
    OBSERVACOES: string | null
    DATACAD: Date | null
    ATIVO: boolean | null
  }

  export type BeneficiarioCountAggregateOutputType = {
    IDBENEFICIARIO: number
    NOME: number
    DATANASC: number
    TIPOPESSOA: number
    GENERO: number
    CPF: number
    RG: number
    CNPJ: number
    CONTATO1: number
    CONTATO2: number
    CEP: number
    LOGRADOUDO: number
    NUMERO: number
    COMPLEMENTO: number
    BAIRRO: number
    CIDADE: number
    SIGLAESTADO: number
    OBSERVACOES: number
    DATACAD: number
    ATIVO: number
    _all: number
  }


  export type BeneficiarioAvgAggregateInputType = {
    IDBENEFICIARIO?: true
  }

  export type BeneficiarioSumAggregateInputType = {
    IDBENEFICIARIO?: true
  }

  export type BeneficiarioMinAggregateInputType = {
    IDBENEFICIARIO?: true
    NOME?: true
    DATANASC?: true
    TIPOPESSOA?: true
    GENERO?: true
    CPF?: true
    RG?: true
    CNPJ?: true
    CONTATO1?: true
    CONTATO2?: true
    CEP?: true
    LOGRADOUDO?: true
    NUMERO?: true
    COMPLEMENTO?: true
    BAIRRO?: true
    CIDADE?: true
    SIGLAESTADO?: true
    OBSERVACOES?: true
    DATACAD?: true
    ATIVO?: true
  }

  export type BeneficiarioMaxAggregateInputType = {
    IDBENEFICIARIO?: true
    NOME?: true
    DATANASC?: true
    TIPOPESSOA?: true
    GENERO?: true
    CPF?: true
    RG?: true
    CNPJ?: true
    CONTATO1?: true
    CONTATO2?: true
    CEP?: true
    LOGRADOUDO?: true
    NUMERO?: true
    COMPLEMENTO?: true
    BAIRRO?: true
    CIDADE?: true
    SIGLAESTADO?: true
    OBSERVACOES?: true
    DATACAD?: true
    ATIVO?: true
  }

  export type BeneficiarioCountAggregateInputType = {
    IDBENEFICIARIO?: true
    NOME?: true
    DATANASC?: true
    TIPOPESSOA?: true
    GENERO?: true
    CPF?: true
    RG?: true
    CNPJ?: true
    CONTATO1?: true
    CONTATO2?: true
    CEP?: true
    LOGRADOUDO?: true
    NUMERO?: true
    COMPLEMENTO?: true
    BAIRRO?: true
    CIDADE?: true
    SIGLAESTADO?: true
    OBSERVACOES?: true
    DATACAD?: true
    ATIVO?: true
    _all?: true
  }

  export type BeneficiarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which beneficiario to aggregate.
     */
    where?: beneficiarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of beneficiarios to fetch.
     */
    orderBy?: beneficiarioOrderByWithRelationInput | beneficiarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: beneficiarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` beneficiarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` beneficiarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned beneficiarios
    **/
    _count?: true | BeneficiarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BeneficiarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BeneficiarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BeneficiarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BeneficiarioMaxAggregateInputType
  }

  export type GetBeneficiarioAggregateType<T extends BeneficiarioAggregateArgs> = {
        [P in keyof T & keyof AggregateBeneficiario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBeneficiario[P]>
      : GetScalarType<T[P], AggregateBeneficiario[P]>
  }




  export type beneficiarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: beneficiarioWhereInput
    orderBy?: beneficiarioOrderByWithAggregationInput | beneficiarioOrderByWithAggregationInput[]
    by: BeneficiarioScalarFieldEnum[] | BeneficiarioScalarFieldEnum
    having?: beneficiarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BeneficiarioCountAggregateInputType | true
    _avg?: BeneficiarioAvgAggregateInputType
    _sum?: BeneficiarioSumAggregateInputType
    _min?: BeneficiarioMinAggregateInputType
    _max?: BeneficiarioMaxAggregateInputType
  }

  export type BeneficiarioGroupByOutputType = {
    IDBENEFICIARIO: number
    NOME: string
    DATANASC: Date | null
    TIPOPESSOA: string
    GENERO: string | null
    CPF: string | null
    RG: string | null
    CNPJ: string | null
    CONTATO1: string | null
    CONTATO2: string | null
    CEP: string | null
    LOGRADOUDO: string | null
    NUMERO: string | null
    COMPLEMENTO: string | null
    BAIRRO: string | null
    CIDADE: string | null
    SIGLAESTADO: string | null
    OBSERVACOES: string | null
    DATACAD: Date | null
    ATIVO: boolean
    _count: BeneficiarioCountAggregateOutputType | null
    _avg: BeneficiarioAvgAggregateOutputType | null
    _sum: BeneficiarioSumAggregateOutputType | null
    _min: BeneficiarioMinAggregateOutputType | null
    _max: BeneficiarioMaxAggregateOutputType | null
  }

  type GetBeneficiarioGroupByPayload<T extends beneficiarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BeneficiarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BeneficiarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BeneficiarioGroupByOutputType[P]>
            : GetScalarType<T[P], BeneficiarioGroupByOutputType[P]>
        }
      >
    >


  export type beneficiarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    IDBENEFICIARIO?: boolean
    NOME?: boolean
    DATANASC?: boolean
    TIPOPESSOA?: boolean
    GENERO?: boolean
    CPF?: boolean
    RG?: boolean
    CNPJ?: boolean
    CONTATO1?: boolean
    CONTATO2?: boolean
    CEP?: boolean
    LOGRADOUDO?: boolean
    NUMERO?: boolean
    COMPLEMENTO?: boolean
    BAIRRO?: boolean
    CIDADE?: boolean
    SIGLAESTADO?: boolean
    OBSERVACOES?: boolean
    DATACAD?: boolean
    ATIVO?: boolean
  }, ExtArgs["result"]["beneficiario"]>

  export type beneficiarioSelectScalar = {
    IDBENEFICIARIO?: boolean
    NOME?: boolean
    DATANASC?: boolean
    TIPOPESSOA?: boolean
    GENERO?: boolean
    CPF?: boolean
    RG?: boolean
    CNPJ?: boolean
    CONTATO1?: boolean
    CONTATO2?: boolean
    CEP?: boolean
    LOGRADOUDO?: boolean
    NUMERO?: boolean
    COMPLEMENTO?: boolean
    BAIRRO?: boolean
    CIDADE?: boolean
    SIGLAESTADO?: boolean
    OBSERVACOES?: boolean
    DATACAD?: boolean
    ATIVO?: boolean
  }



  export type $beneficiarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "beneficiario"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      IDBENEFICIARIO: number
      NOME: string
      DATANASC: Date | null
      TIPOPESSOA: string
      GENERO: string | null
      CPF: string | null
      RG: string | null
      CNPJ: string | null
      CONTATO1: string | null
      CONTATO2: string | null
      CEP: string | null
      LOGRADOUDO: string | null
      NUMERO: string | null
      COMPLEMENTO: string | null
      BAIRRO: string | null
      CIDADE: string | null
      SIGLAESTADO: string | null
      OBSERVACOES: string | null
      DATACAD: Date | null
      ATIVO: boolean
    }, ExtArgs["result"]["beneficiario"]>
    composites: {}
  }


  type beneficiarioGetPayload<S extends boolean | null | undefined | beneficiarioDefaultArgs> = $Result.GetResult<Prisma.$beneficiarioPayload, S>

  type beneficiarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<beneficiarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BeneficiarioCountAggregateInputType | true
    }

  export interface beneficiarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['beneficiario'], meta: { name: 'beneficiario' } }
    /**
     * Find zero or one Beneficiario that matches the filter.
     * @param {beneficiarioFindUniqueArgs} args - Arguments to find a Beneficiario
     * @example
     * // Get one Beneficiario
     * const beneficiario = await prisma.beneficiario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends beneficiarioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, beneficiarioFindUniqueArgs<ExtArgs>>
    ): Prisma__beneficiarioClient<$Result.GetResult<Prisma.$beneficiarioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Beneficiario that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {beneficiarioFindUniqueOrThrowArgs} args - Arguments to find a Beneficiario
     * @example
     * // Get one Beneficiario
     * const beneficiario = await prisma.beneficiario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends beneficiarioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, beneficiarioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__beneficiarioClient<$Result.GetResult<Prisma.$beneficiarioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Beneficiario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {beneficiarioFindFirstArgs} args - Arguments to find a Beneficiario
     * @example
     * // Get one Beneficiario
     * const beneficiario = await prisma.beneficiario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends beneficiarioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, beneficiarioFindFirstArgs<ExtArgs>>
    ): Prisma__beneficiarioClient<$Result.GetResult<Prisma.$beneficiarioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Beneficiario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {beneficiarioFindFirstOrThrowArgs} args - Arguments to find a Beneficiario
     * @example
     * // Get one Beneficiario
     * const beneficiario = await prisma.beneficiario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends beneficiarioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, beneficiarioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__beneficiarioClient<$Result.GetResult<Prisma.$beneficiarioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Beneficiarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {beneficiarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Beneficiarios
     * const beneficiarios = await prisma.beneficiario.findMany()
     * 
     * // Get first 10 Beneficiarios
     * const beneficiarios = await prisma.beneficiario.findMany({ take: 10 })
     * 
     * // Only select the `IDBENEFICIARIO`
     * const beneficiarioWithIDBENEFICIARIOOnly = await prisma.beneficiario.findMany({ select: { IDBENEFICIARIO: true } })
     * 
    **/
    findMany<T extends beneficiarioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, beneficiarioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$beneficiarioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Beneficiario.
     * @param {beneficiarioCreateArgs} args - Arguments to create a Beneficiario.
     * @example
     * // Create one Beneficiario
     * const Beneficiario = await prisma.beneficiario.create({
     *   data: {
     *     // ... data to create a Beneficiario
     *   }
     * })
     * 
    **/
    create<T extends beneficiarioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, beneficiarioCreateArgs<ExtArgs>>
    ): Prisma__beneficiarioClient<$Result.GetResult<Prisma.$beneficiarioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Beneficiarios.
     * @param {beneficiarioCreateManyArgs} args - Arguments to create many Beneficiarios.
     * @example
     * // Create many Beneficiarios
     * const beneficiario = await prisma.beneficiario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends beneficiarioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, beneficiarioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Beneficiario.
     * @param {beneficiarioDeleteArgs} args - Arguments to delete one Beneficiario.
     * @example
     * // Delete one Beneficiario
     * const Beneficiario = await prisma.beneficiario.delete({
     *   where: {
     *     // ... filter to delete one Beneficiario
     *   }
     * })
     * 
    **/
    delete<T extends beneficiarioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, beneficiarioDeleteArgs<ExtArgs>>
    ): Prisma__beneficiarioClient<$Result.GetResult<Prisma.$beneficiarioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Beneficiario.
     * @param {beneficiarioUpdateArgs} args - Arguments to update one Beneficiario.
     * @example
     * // Update one Beneficiario
     * const beneficiario = await prisma.beneficiario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends beneficiarioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, beneficiarioUpdateArgs<ExtArgs>>
    ): Prisma__beneficiarioClient<$Result.GetResult<Prisma.$beneficiarioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Beneficiarios.
     * @param {beneficiarioDeleteManyArgs} args - Arguments to filter Beneficiarios to delete.
     * @example
     * // Delete a few Beneficiarios
     * const { count } = await prisma.beneficiario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends beneficiarioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, beneficiarioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Beneficiarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {beneficiarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Beneficiarios
     * const beneficiario = await prisma.beneficiario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends beneficiarioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, beneficiarioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Beneficiario.
     * @param {beneficiarioUpsertArgs} args - Arguments to update or create a Beneficiario.
     * @example
     * // Update or create a Beneficiario
     * const beneficiario = await prisma.beneficiario.upsert({
     *   create: {
     *     // ... data to create a Beneficiario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Beneficiario we want to update
     *   }
     * })
    **/
    upsert<T extends beneficiarioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, beneficiarioUpsertArgs<ExtArgs>>
    ): Prisma__beneficiarioClient<$Result.GetResult<Prisma.$beneficiarioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Beneficiarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {beneficiarioCountArgs} args - Arguments to filter Beneficiarios to count.
     * @example
     * // Count the number of Beneficiarios
     * const count = await prisma.beneficiario.count({
     *   where: {
     *     // ... the filter for the Beneficiarios we want to count
     *   }
     * })
    **/
    count<T extends beneficiarioCountArgs>(
      args?: Subset<T, beneficiarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BeneficiarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Beneficiario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BeneficiarioAggregateArgs>(args: Subset<T, BeneficiarioAggregateArgs>): Prisma.PrismaPromise<GetBeneficiarioAggregateType<T>>

    /**
     * Group by Beneficiario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {beneficiarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends beneficiarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: beneficiarioGroupByArgs['orderBy'] }
        : { orderBy?: beneficiarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, beneficiarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBeneficiarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the beneficiario model
   */
  readonly fields: beneficiarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for beneficiario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__beneficiarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the beneficiario model
   */ 
  interface beneficiarioFieldRefs {
    readonly IDBENEFICIARIO: FieldRef<"beneficiario", 'Int'>
    readonly NOME: FieldRef<"beneficiario", 'String'>
    readonly DATANASC: FieldRef<"beneficiario", 'DateTime'>
    readonly TIPOPESSOA: FieldRef<"beneficiario", 'String'>
    readonly GENERO: FieldRef<"beneficiario", 'String'>
    readonly CPF: FieldRef<"beneficiario", 'String'>
    readonly RG: FieldRef<"beneficiario", 'String'>
    readonly CNPJ: FieldRef<"beneficiario", 'String'>
    readonly CONTATO1: FieldRef<"beneficiario", 'String'>
    readonly CONTATO2: FieldRef<"beneficiario", 'String'>
    readonly CEP: FieldRef<"beneficiario", 'String'>
    readonly LOGRADOUDO: FieldRef<"beneficiario", 'String'>
    readonly NUMERO: FieldRef<"beneficiario", 'String'>
    readonly COMPLEMENTO: FieldRef<"beneficiario", 'String'>
    readonly BAIRRO: FieldRef<"beneficiario", 'String'>
    readonly CIDADE: FieldRef<"beneficiario", 'String'>
    readonly SIGLAESTADO: FieldRef<"beneficiario", 'String'>
    readonly OBSERVACOES: FieldRef<"beneficiario", 'String'>
    readonly DATACAD: FieldRef<"beneficiario", 'DateTime'>
    readonly ATIVO: FieldRef<"beneficiario", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * beneficiario findUnique
   */
  export type beneficiarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the beneficiario
     */
    select?: beneficiarioSelect<ExtArgs> | null
    /**
     * Filter, which beneficiario to fetch.
     */
    where: beneficiarioWhereUniqueInput
  }

  /**
   * beneficiario findUniqueOrThrow
   */
  export type beneficiarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the beneficiario
     */
    select?: beneficiarioSelect<ExtArgs> | null
    /**
     * Filter, which beneficiario to fetch.
     */
    where: beneficiarioWhereUniqueInput
  }

  /**
   * beneficiario findFirst
   */
  export type beneficiarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the beneficiario
     */
    select?: beneficiarioSelect<ExtArgs> | null
    /**
     * Filter, which beneficiario to fetch.
     */
    where?: beneficiarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of beneficiarios to fetch.
     */
    orderBy?: beneficiarioOrderByWithRelationInput | beneficiarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for beneficiarios.
     */
    cursor?: beneficiarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` beneficiarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` beneficiarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of beneficiarios.
     */
    distinct?: BeneficiarioScalarFieldEnum | BeneficiarioScalarFieldEnum[]
  }

  /**
   * beneficiario findFirstOrThrow
   */
  export type beneficiarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the beneficiario
     */
    select?: beneficiarioSelect<ExtArgs> | null
    /**
     * Filter, which beneficiario to fetch.
     */
    where?: beneficiarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of beneficiarios to fetch.
     */
    orderBy?: beneficiarioOrderByWithRelationInput | beneficiarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for beneficiarios.
     */
    cursor?: beneficiarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` beneficiarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` beneficiarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of beneficiarios.
     */
    distinct?: BeneficiarioScalarFieldEnum | BeneficiarioScalarFieldEnum[]
  }

  /**
   * beneficiario findMany
   */
  export type beneficiarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the beneficiario
     */
    select?: beneficiarioSelect<ExtArgs> | null
    /**
     * Filter, which beneficiarios to fetch.
     */
    where?: beneficiarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of beneficiarios to fetch.
     */
    orderBy?: beneficiarioOrderByWithRelationInput | beneficiarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing beneficiarios.
     */
    cursor?: beneficiarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` beneficiarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` beneficiarios.
     */
    skip?: number
    distinct?: BeneficiarioScalarFieldEnum | BeneficiarioScalarFieldEnum[]
  }

  /**
   * beneficiario create
   */
  export type beneficiarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the beneficiario
     */
    select?: beneficiarioSelect<ExtArgs> | null
    /**
     * The data needed to create a beneficiario.
     */
    data: XOR<beneficiarioCreateInput, beneficiarioUncheckedCreateInput>
  }

  /**
   * beneficiario createMany
   */
  export type beneficiarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many beneficiarios.
     */
    data: beneficiarioCreateManyInput | beneficiarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * beneficiario update
   */
  export type beneficiarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the beneficiario
     */
    select?: beneficiarioSelect<ExtArgs> | null
    /**
     * The data needed to update a beneficiario.
     */
    data: XOR<beneficiarioUpdateInput, beneficiarioUncheckedUpdateInput>
    /**
     * Choose, which beneficiario to update.
     */
    where: beneficiarioWhereUniqueInput
  }

  /**
   * beneficiario updateMany
   */
  export type beneficiarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update beneficiarios.
     */
    data: XOR<beneficiarioUpdateManyMutationInput, beneficiarioUncheckedUpdateManyInput>
    /**
     * Filter which beneficiarios to update
     */
    where?: beneficiarioWhereInput
  }

  /**
   * beneficiario upsert
   */
  export type beneficiarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the beneficiario
     */
    select?: beneficiarioSelect<ExtArgs> | null
    /**
     * The filter to search for the beneficiario to update in case it exists.
     */
    where: beneficiarioWhereUniqueInput
    /**
     * In case the beneficiario found by the `where` argument doesn't exist, create a new beneficiario with this data.
     */
    create: XOR<beneficiarioCreateInput, beneficiarioUncheckedCreateInput>
    /**
     * In case the beneficiario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<beneficiarioUpdateInput, beneficiarioUncheckedUpdateInput>
  }

  /**
   * beneficiario delete
   */
  export type beneficiarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the beneficiario
     */
    select?: beneficiarioSelect<ExtArgs> | null
    /**
     * Filter which beneficiario to delete.
     */
    where: beneficiarioWhereUniqueInput
  }

  /**
   * beneficiario deleteMany
   */
  export type beneficiarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which beneficiarios to delete
     */
    where?: beneficiarioWhereInput
  }

  /**
   * beneficiario without action
   */
  export type beneficiarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the beneficiario
     */
    select?: beneficiarioSelect<ExtArgs> | null
  }


  /**
   * Model doador
   */

  export type AggregateDoador = {
    _count: DoadorCountAggregateOutputType | null
    _avg: DoadorAvgAggregateOutputType | null
    _sum: DoadorSumAggregateOutputType | null
    _min: DoadorMinAggregateOutputType | null
    _max: DoadorMaxAggregateOutputType | null
  }

  export type DoadorAvgAggregateOutputType = {
    IDDOADOR: number | null
  }

  export type DoadorSumAggregateOutputType = {
    IDDOADOR: number | null
  }

  export type DoadorMinAggregateOutputType = {
    IDDOADOR: number | null
    NOME: string | null
    TIPOPESSOA: string | null
    CPF: string | null
    CNPJ: string | null
    CONTATO1: string | null
    CONTATO2: string | null
    CEP: string | null
    LOGRADOUDO: string | null
    NUMERO: string | null
    COMPLEMENTO: string | null
    BAIRRO: string | null
    CIDADE: string | null
    SIGLAESTADO: string | null
    OBSERVACOES: string | null
    DATACAD: Date | null
    ATIVO: boolean | null
  }

  export type DoadorMaxAggregateOutputType = {
    IDDOADOR: number | null
    NOME: string | null
    TIPOPESSOA: string | null
    CPF: string | null
    CNPJ: string | null
    CONTATO1: string | null
    CONTATO2: string | null
    CEP: string | null
    LOGRADOUDO: string | null
    NUMERO: string | null
    COMPLEMENTO: string | null
    BAIRRO: string | null
    CIDADE: string | null
    SIGLAESTADO: string | null
    OBSERVACOES: string | null
    DATACAD: Date | null
    ATIVO: boolean | null
  }

  export type DoadorCountAggregateOutputType = {
    IDDOADOR: number
    NOME: number
    TIPOPESSOA: number
    CPF: number
    CNPJ: number
    CONTATO1: number
    CONTATO2: number
    CEP: number
    LOGRADOUDO: number
    NUMERO: number
    COMPLEMENTO: number
    BAIRRO: number
    CIDADE: number
    SIGLAESTADO: number
    OBSERVACOES: number
    DATACAD: number
    ATIVO: number
    _all: number
  }


  export type DoadorAvgAggregateInputType = {
    IDDOADOR?: true
  }

  export type DoadorSumAggregateInputType = {
    IDDOADOR?: true
  }

  export type DoadorMinAggregateInputType = {
    IDDOADOR?: true
    NOME?: true
    TIPOPESSOA?: true
    CPF?: true
    CNPJ?: true
    CONTATO1?: true
    CONTATO2?: true
    CEP?: true
    LOGRADOUDO?: true
    NUMERO?: true
    COMPLEMENTO?: true
    BAIRRO?: true
    CIDADE?: true
    SIGLAESTADO?: true
    OBSERVACOES?: true
    DATACAD?: true
    ATIVO?: true
  }

  export type DoadorMaxAggregateInputType = {
    IDDOADOR?: true
    NOME?: true
    TIPOPESSOA?: true
    CPF?: true
    CNPJ?: true
    CONTATO1?: true
    CONTATO2?: true
    CEP?: true
    LOGRADOUDO?: true
    NUMERO?: true
    COMPLEMENTO?: true
    BAIRRO?: true
    CIDADE?: true
    SIGLAESTADO?: true
    OBSERVACOES?: true
    DATACAD?: true
    ATIVO?: true
  }

  export type DoadorCountAggregateInputType = {
    IDDOADOR?: true
    NOME?: true
    TIPOPESSOA?: true
    CPF?: true
    CNPJ?: true
    CONTATO1?: true
    CONTATO2?: true
    CEP?: true
    LOGRADOUDO?: true
    NUMERO?: true
    COMPLEMENTO?: true
    BAIRRO?: true
    CIDADE?: true
    SIGLAESTADO?: true
    OBSERVACOES?: true
    DATACAD?: true
    ATIVO?: true
    _all?: true
  }

  export type DoadorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which doador to aggregate.
     */
    where?: doadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doadors to fetch.
     */
    orderBy?: doadorOrderByWithRelationInput | doadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: doadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned doadors
    **/
    _count?: true | DoadorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoadorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoadorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoadorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoadorMaxAggregateInputType
  }

  export type GetDoadorAggregateType<T extends DoadorAggregateArgs> = {
        [P in keyof T & keyof AggregateDoador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoador[P]>
      : GetScalarType<T[P], AggregateDoador[P]>
  }




  export type doadorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: doadorWhereInput
    orderBy?: doadorOrderByWithAggregationInput | doadorOrderByWithAggregationInput[]
    by: DoadorScalarFieldEnum[] | DoadorScalarFieldEnum
    having?: doadorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoadorCountAggregateInputType | true
    _avg?: DoadorAvgAggregateInputType
    _sum?: DoadorSumAggregateInputType
    _min?: DoadorMinAggregateInputType
    _max?: DoadorMaxAggregateInputType
  }

  export type DoadorGroupByOutputType = {
    IDDOADOR: number
    NOME: string
    TIPOPESSOA: string
    CPF: string | null
    CNPJ: string | null
    CONTATO1: string | null
    CONTATO2: string | null
    CEP: string | null
    LOGRADOUDO: string | null
    NUMERO: string | null
    COMPLEMENTO: string | null
    BAIRRO: string | null
    CIDADE: string | null
    SIGLAESTADO: string | null
    OBSERVACOES: string | null
    DATACAD: Date | null
    ATIVO: boolean
    _count: DoadorCountAggregateOutputType | null
    _avg: DoadorAvgAggregateOutputType | null
    _sum: DoadorSumAggregateOutputType | null
    _min: DoadorMinAggregateOutputType | null
    _max: DoadorMaxAggregateOutputType | null
  }

  type GetDoadorGroupByPayload<T extends doadorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoadorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoadorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoadorGroupByOutputType[P]>
            : GetScalarType<T[P], DoadorGroupByOutputType[P]>
        }
      >
    >


  export type doadorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    IDDOADOR?: boolean
    NOME?: boolean
    TIPOPESSOA?: boolean
    CPF?: boolean
    CNPJ?: boolean
    CONTATO1?: boolean
    CONTATO2?: boolean
    CEP?: boolean
    LOGRADOUDO?: boolean
    NUMERO?: boolean
    COMPLEMENTO?: boolean
    BAIRRO?: boolean
    CIDADE?: boolean
    SIGLAESTADO?: boolean
    OBSERVACOES?: boolean
    DATACAD?: boolean
    ATIVO?: boolean
  }, ExtArgs["result"]["doador"]>

  export type doadorSelectScalar = {
    IDDOADOR?: boolean
    NOME?: boolean
    TIPOPESSOA?: boolean
    CPF?: boolean
    CNPJ?: boolean
    CONTATO1?: boolean
    CONTATO2?: boolean
    CEP?: boolean
    LOGRADOUDO?: boolean
    NUMERO?: boolean
    COMPLEMENTO?: boolean
    BAIRRO?: boolean
    CIDADE?: boolean
    SIGLAESTADO?: boolean
    OBSERVACOES?: boolean
    DATACAD?: boolean
    ATIVO?: boolean
  }



  export type $doadorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "doador"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      IDDOADOR: number
      NOME: string
      TIPOPESSOA: string
      CPF: string | null
      CNPJ: string | null
      CONTATO1: string | null
      CONTATO2: string | null
      CEP: string | null
      LOGRADOUDO: string | null
      NUMERO: string | null
      COMPLEMENTO: string | null
      BAIRRO: string | null
      CIDADE: string | null
      SIGLAESTADO: string | null
      OBSERVACOES: string | null
      DATACAD: Date | null
      ATIVO: boolean
    }, ExtArgs["result"]["doador"]>
    composites: {}
  }


  type doadorGetPayload<S extends boolean | null | undefined | doadorDefaultArgs> = $Result.GetResult<Prisma.$doadorPayload, S>

  type doadorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<doadorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DoadorCountAggregateInputType | true
    }

  export interface doadorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['doador'], meta: { name: 'doador' } }
    /**
     * Find zero or one Doador that matches the filter.
     * @param {doadorFindUniqueArgs} args - Arguments to find a Doador
     * @example
     * // Get one Doador
     * const doador = await prisma.doador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends doadorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, doadorFindUniqueArgs<ExtArgs>>
    ): Prisma__doadorClient<$Result.GetResult<Prisma.$doadorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Doador that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {doadorFindUniqueOrThrowArgs} args - Arguments to find a Doador
     * @example
     * // Get one Doador
     * const doador = await prisma.doador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends doadorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, doadorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__doadorClient<$Result.GetResult<Prisma.$doadorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Doador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doadorFindFirstArgs} args - Arguments to find a Doador
     * @example
     * // Get one Doador
     * const doador = await prisma.doador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends doadorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, doadorFindFirstArgs<ExtArgs>>
    ): Prisma__doadorClient<$Result.GetResult<Prisma.$doadorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Doador that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doadorFindFirstOrThrowArgs} args - Arguments to find a Doador
     * @example
     * // Get one Doador
     * const doador = await prisma.doador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends doadorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, doadorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__doadorClient<$Result.GetResult<Prisma.$doadorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Doadors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doadorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doadors
     * const doadors = await prisma.doador.findMany()
     * 
     * // Get first 10 Doadors
     * const doadors = await prisma.doador.findMany({ take: 10 })
     * 
     * // Only select the `IDDOADOR`
     * const doadorWithIDDOADOROnly = await prisma.doador.findMany({ select: { IDDOADOR: true } })
     * 
    **/
    findMany<T extends doadorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, doadorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$doadorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Doador.
     * @param {doadorCreateArgs} args - Arguments to create a Doador.
     * @example
     * // Create one Doador
     * const Doador = await prisma.doador.create({
     *   data: {
     *     // ... data to create a Doador
     *   }
     * })
     * 
    **/
    create<T extends doadorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, doadorCreateArgs<ExtArgs>>
    ): Prisma__doadorClient<$Result.GetResult<Prisma.$doadorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Doadors.
     * @param {doadorCreateManyArgs} args - Arguments to create many Doadors.
     * @example
     * // Create many Doadors
     * const doador = await prisma.doador.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends doadorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, doadorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Doador.
     * @param {doadorDeleteArgs} args - Arguments to delete one Doador.
     * @example
     * // Delete one Doador
     * const Doador = await prisma.doador.delete({
     *   where: {
     *     // ... filter to delete one Doador
     *   }
     * })
     * 
    **/
    delete<T extends doadorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, doadorDeleteArgs<ExtArgs>>
    ): Prisma__doadorClient<$Result.GetResult<Prisma.$doadorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Doador.
     * @param {doadorUpdateArgs} args - Arguments to update one Doador.
     * @example
     * // Update one Doador
     * const doador = await prisma.doador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends doadorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, doadorUpdateArgs<ExtArgs>>
    ): Prisma__doadorClient<$Result.GetResult<Prisma.$doadorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Doadors.
     * @param {doadorDeleteManyArgs} args - Arguments to filter Doadors to delete.
     * @example
     * // Delete a few Doadors
     * const { count } = await prisma.doador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends doadorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, doadorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doadorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doadors
     * const doador = await prisma.doador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends doadorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, doadorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Doador.
     * @param {doadorUpsertArgs} args - Arguments to update or create a Doador.
     * @example
     * // Update or create a Doador
     * const doador = await prisma.doador.upsert({
     *   create: {
     *     // ... data to create a Doador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doador we want to update
     *   }
     * })
    **/
    upsert<T extends doadorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, doadorUpsertArgs<ExtArgs>>
    ): Prisma__doadorClient<$Result.GetResult<Prisma.$doadorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Doadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doadorCountArgs} args - Arguments to filter Doadors to count.
     * @example
     * // Count the number of Doadors
     * const count = await prisma.doador.count({
     *   where: {
     *     // ... the filter for the Doadors we want to count
     *   }
     * })
    **/
    count<T extends doadorCountArgs>(
      args?: Subset<T, doadorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoadorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoadorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoadorAggregateArgs>(args: Subset<T, DoadorAggregateArgs>): Prisma.PrismaPromise<GetDoadorAggregateType<T>>

    /**
     * Group by Doador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doadorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends doadorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: doadorGroupByArgs['orderBy'] }
        : { orderBy?: doadorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, doadorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoadorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the doador model
   */
  readonly fields: doadorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for doador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__doadorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the doador model
   */ 
  interface doadorFieldRefs {
    readonly IDDOADOR: FieldRef<"doador", 'Int'>
    readonly NOME: FieldRef<"doador", 'String'>
    readonly TIPOPESSOA: FieldRef<"doador", 'String'>
    readonly CPF: FieldRef<"doador", 'String'>
    readonly CNPJ: FieldRef<"doador", 'String'>
    readonly CONTATO1: FieldRef<"doador", 'String'>
    readonly CONTATO2: FieldRef<"doador", 'String'>
    readonly CEP: FieldRef<"doador", 'String'>
    readonly LOGRADOUDO: FieldRef<"doador", 'String'>
    readonly NUMERO: FieldRef<"doador", 'String'>
    readonly COMPLEMENTO: FieldRef<"doador", 'String'>
    readonly BAIRRO: FieldRef<"doador", 'String'>
    readonly CIDADE: FieldRef<"doador", 'String'>
    readonly SIGLAESTADO: FieldRef<"doador", 'String'>
    readonly OBSERVACOES: FieldRef<"doador", 'String'>
    readonly DATACAD: FieldRef<"doador", 'DateTime'>
    readonly ATIVO: FieldRef<"doador", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * doador findUnique
   */
  export type doadorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doador
     */
    select?: doadorSelect<ExtArgs> | null
    /**
     * Filter, which doador to fetch.
     */
    where: doadorWhereUniqueInput
  }

  /**
   * doador findUniqueOrThrow
   */
  export type doadorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doador
     */
    select?: doadorSelect<ExtArgs> | null
    /**
     * Filter, which doador to fetch.
     */
    where: doadorWhereUniqueInput
  }

  /**
   * doador findFirst
   */
  export type doadorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doador
     */
    select?: doadorSelect<ExtArgs> | null
    /**
     * Filter, which doador to fetch.
     */
    where?: doadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doadors to fetch.
     */
    orderBy?: doadorOrderByWithRelationInput | doadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for doadors.
     */
    cursor?: doadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of doadors.
     */
    distinct?: DoadorScalarFieldEnum | DoadorScalarFieldEnum[]
  }

  /**
   * doador findFirstOrThrow
   */
  export type doadorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doador
     */
    select?: doadorSelect<ExtArgs> | null
    /**
     * Filter, which doador to fetch.
     */
    where?: doadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doadors to fetch.
     */
    orderBy?: doadorOrderByWithRelationInput | doadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for doadors.
     */
    cursor?: doadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of doadors.
     */
    distinct?: DoadorScalarFieldEnum | DoadorScalarFieldEnum[]
  }

  /**
   * doador findMany
   */
  export type doadorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doador
     */
    select?: doadorSelect<ExtArgs> | null
    /**
     * Filter, which doadors to fetch.
     */
    where?: doadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doadors to fetch.
     */
    orderBy?: doadorOrderByWithRelationInput | doadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing doadors.
     */
    cursor?: doadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doadors.
     */
    skip?: number
    distinct?: DoadorScalarFieldEnum | DoadorScalarFieldEnum[]
  }

  /**
   * doador create
   */
  export type doadorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doador
     */
    select?: doadorSelect<ExtArgs> | null
    /**
     * The data needed to create a doador.
     */
    data: XOR<doadorCreateInput, doadorUncheckedCreateInput>
  }

  /**
   * doador createMany
   */
  export type doadorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many doadors.
     */
    data: doadorCreateManyInput | doadorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * doador update
   */
  export type doadorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doador
     */
    select?: doadorSelect<ExtArgs> | null
    /**
     * The data needed to update a doador.
     */
    data: XOR<doadorUpdateInput, doadorUncheckedUpdateInput>
    /**
     * Choose, which doador to update.
     */
    where: doadorWhereUniqueInput
  }

  /**
   * doador updateMany
   */
  export type doadorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update doadors.
     */
    data: XOR<doadorUpdateManyMutationInput, doadorUncheckedUpdateManyInput>
    /**
     * Filter which doadors to update
     */
    where?: doadorWhereInput
  }

  /**
   * doador upsert
   */
  export type doadorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doador
     */
    select?: doadorSelect<ExtArgs> | null
    /**
     * The filter to search for the doador to update in case it exists.
     */
    where: doadorWhereUniqueInput
    /**
     * In case the doador found by the `where` argument doesn't exist, create a new doador with this data.
     */
    create: XOR<doadorCreateInput, doadorUncheckedCreateInput>
    /**
     * In case the doador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<doadorUpdateInput, doadorUncheckedUpdateInput>
  }

  /**
   * doador delete
   */
  export type doadorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doador
     */
    select?: doadorSelect<ExtArgs> | null
    /**
     * Filter which doador to delete.
     */
    where: doadorWhereUniqueInput
  }

  /**
   * doador deleteMany
   */
  export type doadorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which doadors to delete
     */
    where?: doadorWhereInput
  }

  /**
   * doador without action
   */
  export type doadorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doador
     */
    select?: doadorSelect<ExtArgs> | null
  }


  /**
   * Model empresa
   */

  export type AggregateEmpresa = {
    _count: EmpresaCountAggregateOutputType | null
    _avg: EmpresaAvgAggregateOutputType | null
    _sum: EmpresaSumAggregateOutputType | null
    _min: EmpresaMinAggregateOutputType | null
    _max: EmpresaMaxAggregateOutputType | null
  }

  export type EmpresaAvgAggregateOutputType = {
    IDEMPRESA: number | null
  }

  export type EmpresaSumAggregateOutputType = {
    IDEMPRESA: number | null
  }

  export type EmpresaMinAggregateOutputType = {
    IDEMPRESA: number | null
    NOMEFANTASIA: string | null
    RAZAOSOCIAL: string | null
    CNPJ: string | null
    CONTATO1: string | null
    CONTATO2: string | null
    CEP: string | null
    LOGRADOURO: string | null
    NUMERO: string | null
    COMPLEMENTO: string | null
    BAIRRO: string | null
    CIDADE: string | null
    SIGLAESTADO: string | null
  }

  export type EmpresaMaxAggregateOutputType = {
    IDEMPRESA: number | null
    NOMEFANTASIA: string | null
    RAZAOSOCIAL: string | null
    CNPJ: string | null
    CONTATO1: string | null
    CONTATO2: string | null
    CEP: string | null
    LOGRADOURO: string | null
    NUMERO: string | null
    COMPLEMENTO: string | null
    BAIRRO: string | null
    CIDADE: string | null
    SIGLAESTADO: string | null
  }

  export type EmpresaCountAggregateOutputType = {
    IDEMPRESA: number
    NOMEFANTASIA: number
    RAZAOSOCIAL: number
    CNPJ: number
    CONTATO1: number
    CONTATO2: number
    CEP: number
    LOGRADOURO: number
    NUMERO: number
    COMPLEMENTO: number
    BAIRRO: number
    CIDADE: number
    SIGLAESTADO: number
    _all: number
  }


  export type EmpresaAvgAggregateInputType = {
    IDEMPRESA?: true
  }

  export type EmpresaSumAggregateInputType = {
    IDEMPRESA?: true
  }

  export type EmpresaMinAggregateInputType = {
    IDEMPRESA?: true
    NOMEFANTASIA?: true
    RAZAOSOCIAL?: true
    CNPJ?: true
    CONTATO1?: true
    CONTATO2?: true
    CEP?: true
    LOGRADOURO?: true
    NUMERO?: true
    COMPLEMENTO?: true
    BAIRRO?: true
    CIDADE?: true
    SIGLAESTADO?: true
  }

  export type EmpresaMaxAggregateInputType = {
    IDEMPRESA?: true
    NOMEFANTASIA?: true
    RAZAOSOCIAL?: true
    CNPJ?: true
    CONTATO1?: true
    CONTATO2?: true
    CEP?: true
    LOGRADOURO?: true
    NUMERO?: true
    COMPLEMENTO?: true
    BAIRRO?: true
    CIDADE?: true
    SIGLAESTADO?: true
  }

  export type EmpresaCountAggregateInputType = {
    IDEMPRESA?: true
    NOMEFANTASIA?: true
    RAZAOSOCIAL?: true
    CNPJ?: true
    CONTATO1?: true
    CONTATO2?: true
    CEP?: true
    LOGRADOURO?: true
    NUMERO?: true
    COMPLEMENTO?: true
    BAIRRO?: true
    CIDADE?: true
    SIGLAESTADO?: true
    _all?: true
  }

  export type EmpresaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which empresa to aggregate.
     */
    where?: empresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of empresas to fetch.
     */
    orderBy?: empresaOrderByWithRelationInput | empresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: empresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` empresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` empresas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned empresas
    **/
    _count?: true | EmpresaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmpresaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmpresaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmpresaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmpresaMaxAggregateInputType
  }

  export type GetEmpresaAggregateType<T extends EmpresaAggregateArgs> = {
        [P in keyof T & keyof AggregateEmpresa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmpresa[P]>
      : GetScalarType<T[P], AggregateEmpresa[P]>
  }




  export type empresaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: empresaWhereInput
    orderBy?: empresaOrderByWithAggregationInput | empresaOrderByWithAggregationInput[]
    by: EmpresaScalarFieldEnum[] | EmpresaScalarFieldEnum
    having?: empresaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmpresaCountAggregateInputType | true
    _avg?: EmpresaAvgAggregateInputType
    _sum?: EmpresaSumAggregateInputType
    _min?: EmpresaMinAggregateInputType
    _max?: EmpresaMaxAggregateInputType
  }

  export type EmpresaGroupByOutputType = {
    IDEMPRESA: number
    NOMEFANTASIA: string
    RAZAOSOCIAL: string | null
    CNPJ: string | null
    CONTATO1: string | null
    CONTATO2: string | null
    CEP: string | null
    LOGRADOURO: string | null
    NUMERO: string | null
    COMPLEMENTO: string | null
    BAIRRO: string | null
    CIDADE: string | null
    SIGLAESTADO: string | null
    _count: EmpresaCountAggregateOutputType | null
    _avg: EmpresaAvgAggregateOutputType | null
    _sum: EmpresaSumAggregateOutputType | null
    _min: EmpresaMinAggregateOutputType | null
    _max: EmpresaMaxAggregateOutputType | null
  }

  type GetEmpresaGroupByPayload<T extends empresaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmpresaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmpresaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmpresaGroupByOutputType[P]>
            : GetScalarType<T[P], EmpresaGroupByOutputType[P]>
        }
      >
    >


  export type empresaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    IDEMPRESA?: boolean
    NOMEFANTASIA?: boolean
    RAZAOSOCIAL?: boolean
    CNPJ?: boolean
    CONTATO1?: boolean
    CONTATO2?: boolean
    CEP?: boolean
    LOGRADOURO?: boolean
    NUMERO?: boolean
    COMPLEMENTO?: boolean
    BAIRRO?: boolean
    CIDADE?: boolean
    SIGLAESTADO?: boolean
  }, ExtArgs["result"]["empresa"]>

  export type empresaSelectScalar = {
    IDEMPRESA?: boolean
    NOMEFANTASIA?: boolean
    RAZAOSOCIAL?: boolean
    CNPJ?: boolean
    CONTATO1?: boolean
    CONTATO2?: boolean
    CEP?: boolean
    LOGRADOURO?: boolean
    NUMERO?: boolean
    COMPLEMENTO?: boolean
    BAIRRO?: boolean
    CIDADE?: boolean
    SIGLAESTADO?: boolean
  }



  export type $empresaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "empresa"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      IDEMPRESA: number
      NOMEFANTASIA: string
      RAZAOSOCIAL: string | null
      CNPJ: string | null
      CONTATO1: string | null
      CONTATO2: string | null
      CEP: string | null
      LOGRADOURO: string | null
      NUMERO: string | null
      COMPLEMENTO: string | null
      BAIRRO: string | null
      CIDADE: string | null
      SIGLAESTADO: string | null
    }, ExtArgs["result"]["empresa"]>
    composites: {}
  }


  type empresaGetPayload<S extends boolean | null | undefined | empresaDefaultArgs> = $Result.GetResult<Prisma.$empresaPayload, S>

  type empresaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<empresaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmpresaCountAggregateInputType | true
    }

  export interface empresaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['empresa'], meta: { name: 'empresa' } }
    /**
     * Find zero or one Empresa that matches the filter.
     * @param {empresaFindUniqueArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends empresaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, empresaFindUniqueArgs<ExtArgs>>
    ): Prisma__empresaClient<$Result.GetResult<Prisma.$empresaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Empresa that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {empresaFindUniqueOrThrowArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends empresaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, empresaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__empresaClient<$Result.GetResult<Prisma.$empresaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Empresa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {empresaFindFirstArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends empresaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, empresaFindFirstArgs<ExtArgs>>
    ): Prisma__empresaClient<$Result.GetResult<Prisma.$empresaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Empresa that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {empresaFindFirstOrThrowArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends empresaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, empresaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__empresaClient<$Result.GetResult<Prisma.$empresaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Empresas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {empresaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Empresas
     * const empresas = await prisma.empresa.findMany()
     * 
     * // Get first 10 Empresas
     * const empresas = await prisma.empresa.findMany({ take: 10 })
     * 
     * // Only select the `IDEMPRESA`
     * const empresaWithIDEMPRESAOnly = await prisma.empresa.findMany({ select: { IDEMPRESA: true } })
     * 
    **/
    findMany<T extends empresaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, empresaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$empresaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Empresa.
     * @param {empresaCreateArgs} args - Arguments to create a Empresa.
     * @example
     * // Create one Empresa
     * const Empresa = await prisma.empresa.create({
     *   data: {
     *     // ... data to create a Empresa
     *   }
     * })
     * 
    **/
    create<T extends empresaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, empresaCreateArgs<ExtArgs>>
    ): Prisma__empresaClient<$Result.GetResult<Prisma.$empresaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Empresas.
     * @param {empresaCreateManyArgs} args - Arguments to create many Empresas.
     * @example
     * // Create many Empresas
     * const empresa = await prisma.empresa.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends empresaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, empresaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Empresa.
     * @param {empresaDeleteArgs} args - Arguments to delete one Empresa.
     * @example
     * // Delete one Empresa
     * const Empresa = await prisma.empresa.delete({
     *   where: {
     *     // ... filter to delete one Empresa
     *   }
     * })
     * 
    **/
    delete<T extends empresaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, empresaDeleteArgs<ExtArgs>>
    ): Prisma__empresaClient<$Result.GetResult<Prisma.$empresaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Empresa.
     * @param {empresaUpdateArgs} args - Arguments to update one Empresa.
     * @example
     * // Update one Empresa
     * const empresa = await prisma.empresa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends empresaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, empresaUpdateArgs<ExtArgs>>
    ): Prisma__empresaClient<$Result.GetResult<Prisma.$empresaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Empresas.
     * @param {empresaDeleteManyArgs} args - Arguments to filter Empresas to delete.
     * @example
     * // Delete a few Empresas
     * const { count } = await prisma.empresa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends empresaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, empresaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Empresas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {empresaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Empresas
     * const empresa = await prisma.empresa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends empresaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, empresaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Empresa.
     * @param {empresaUpsertArgs} args - Arguments to update or create a Empresa.
     * @example
     * // Update or create a Empresa
     * const empresa = await prisma.empresa.upsert({
     *   create: {
     *     // ... data to create a Empresa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Empresa we want to update
     *   }
     * })
    **/
    upsert<T extends empresaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, empresaUpsertArgs<ExtArgs>>
    ): Prisma__empresaClient<$Result.GetResult<Prisma.$empresaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Empresas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {empresaCountArgs} args - Arguments to filter Empresas to count.
     * @example
     * // Count the number of Empresas
     * const count = await prisma.empresa.count({
     *   where: {
     *     // ... the filter for the Empresas we want to count
     *   }
     * })
    **/
    count<T extends empresaCountArgs>(
      args?: Subset<T, empresaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmpresaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Empresa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmpresaAggregateArgs>(args: Subset<T, EmpresaAggregateArgs>): Prisma.PrismaPromise<GetEmpresaAggregateType<T>>

    /**
     * Group by Empresa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {empresaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends empresaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: empresaGroupByArgs['orderBy'] }
        : { orderBy?: empresaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, empresaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmpresaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the empresa model
   */
  readonly fields: empresaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for empresa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__empresaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the empresa model
   */ 
  interface empresaFieldRefs {
    readonly IDEMPRESA: FieldRef<"empresa", 'Int'>
    readonly NOMEFANTASIA: FieldRef<"empresa", 'String'>
    readonly RAZAOSOCIAL: FieldRef<"empresa", 'String'>
    readonly CNPJ: FieldRef<"empresa", 'String'>
    readonly CONTATO1: FieldRef<"empresa", 'String'>
    readonly CONTATO2: FieldRef<"empresa", 'String'>
    readonly CEP: FieldRef<"empresa", 'String'>
    readonly LOGRADOURO: FieldRef<"empresa", 'String'>
    readonly NUMERO: FieldRef<"empresa", 'String'>
    readonly COMPLEMENTO: FieldRef<"empresa", 'String'>
    readonly BAIRRO: FieldRef<"empresa", 'String'>
    readonly CIDADE: FieldRef<"empresa", 'String'>
    readonly SIGLAESTADO: FieldRef<"empresa", 'String'>
  }
    

  // Custom InputTypes
  /**
   * empresa findUnique
   */
  export type empresaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the empresa
     */
    select?: empresaSelect<ExtArgs> | null
    /**
     * Filter, which empresa to fetch.
     */
    where: empresaWhereUniqueInput
  }

  /**
   * empresa findUniqueOrThrow
   */
  export type empresaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the empresa
     */
    select?: empresaSelect<ExtArgs> | null
    /**
     * Filter, which empresa to fetch.
     */
    where: empresaWhereUniqueInput
  }

  /**
   * empresa findFirst
   */
  export type empresaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the empresa
     */
    select?: empresaSelect<ExtArgs> | null
    /**
     * Filter, which empresa to fetch.
     */
    where?: empresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of empresas to fetch.
     */
    orderBy?: empresaOrderByWithRelationInput | empresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for empresas.
     */
    cursor?: empresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` empresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` empresas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of empresas.
     */
    distinct?: EmpresaScalarFieldEnum | EmpresaScalarFieldEnum[]
  }

  /**
   * empresa findFirstOrThrow
   */
  export type empresaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the empresa
     */
    select?: empresaSelect<ExtArgs> | null
    /**
     * Filter, which empresa to fetch.
     */
    where?: empresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of empresas to fetch.
     */
    orderBy?: empresaOrderByWithRelationInput | empresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for empresas.
     */
    cursor?: empresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` empresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` empresas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of empresas.
     */
    distinct?: EmpresaScalarFieldEnum | EmpresaScalarFieldEnum[]
  }

  /**
   * empresa findMany
   */
  export type empresaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the empresa
     */
    select?: empresaSelect<ExtArgs> | null
    /**
     * Filter, which empresas to fetch.
     */
    where?: empresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of empresas to fetch.
     */
    orderBy?: empresaOrderByWithRelationInput | empresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing empresas.
     */
    cursor?: empresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` empresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` empresas.
     */
    skip?: number
    distinct?: EmpresaScalarFieldEnum | EmpresaScalarFieldEnum[]
  }

  /**
   * empresa create
   */
  export type empresaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the empresa
     */
    select?: empresaSelect<ExtArgs> | null
    /**
     * The data needed to create a empresa.
     */
    data: XOR<empresaCreateInput, empresaUncheckedCreateInput>
  }

  /**
   * empresa createMany
   */
  export type empresaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many empresas.
     */
    data: empresaCreateManyInput | empresaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * empresa update
   */
  export type empresaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the empresa
     */
    select?: empresaSelect<ExtArgs> | null
    /**
     * The data needed to update a empresa.
     */
    data: XOR<empresaUpdateInput, empresaUncheckedUpdateInput>
    /**
     * Choose, which empresa to update.
     */
    where: empresaWhereUniqueInput
  }

  /**
   * empresa updateMany
   */
  export type empresaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update empresas.
     */
    data: XOR<empresaUpdateManyMutationInput, empresaUncheckedUpdateManyInput>
    /**
     * Filter which empresas to update
     */
    where?: empresaWhereInput
  }

  /**
   * empresa upsert
   */
  export type empresaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the empresa
     */
    select?: empresaSelect<ExtArgs> | null
    /**
     * The filter to search for the empresa to update in case it exists.
     */
    where: empresaWhereUniqueInput
    /**
     * In case the empresa found by the `where` argument doesn't exist, create a new empresa with this data.
     */
    create: XOR<empresaCreateInput, empresaUncheckedCreateInput>
    /**
     * In case the empresa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<empresaUpdateInput, empresaUncheckedUpdateInput>
  }

  /**
   * empresa delete
   */
  export type empresaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the empresa
     */
    select?: empresaSelect<ExtArgs> | null
    /**
     * Filter which empresa to delete.
     */
    where: empresaWhereUniqueInput
  }

  /**
   * empresa deleteMany
   */
  export type empresaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which empresas to delete
     */
    where?: empresaWhereInput
  }

  /**
   * empresa without action
   */
  export type empresaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the empresa
     */
    select?: empresaSelect<ExtArgs> | null
  }


  /**
   * Model tipodoacao
   */

  export type AggregateTipodoacao = {
    _count: TipodoacaoCountAggregateOutputType | null
    _avg: TipodoacaoAvgAggregateOutputType | null
    _sum: TipodoacaoSumAggregateOutputType | null
    _min: TipodoacaoMinAggregateOutputType | null
    _max: TipodoacaoMaxAggregateOutputType | null
  }

  export type TipodoacaoAvgAggregateOutputType = {
    IDTIPODOACAO: number | null
  }

  export type TipodoacaoSumAggregateOutputType = {
    IDTIPODOACAO: number | null
  }

  export type TipodoacaoMinAggregateOutputType = {
    IDTIPODOACAO: number | null
    DESCRICAO: string | null
    DATACAD: Date | null
    ATIVO: boolean | null
  }

  export type TipodoacaoMaxAggregateOutputType = {
    IDTIPODOACAO: number | null
    DESCRICAO: string | null
    DATACAD: Date | null
    ATIVO: boolean | null
  }

  export type TipodoacaoCountAggregateOutputType = {
    IDTIPODOACAO: number
    DESCRICAO: number
    DATACAD: number
    ATIVO: number
    _all: number
  }


  export type TipodoacaoAvgAggregateInputType = {
    IDTIPODOACAO?: true
  }

  export type TipodoacaoSumAggregateInputType = {
    IDTIPODOACAO?: true
  }

  export type TipodoacaoMinAggregateInputType = {
    IDTIPODOACAO?: true
    DESCRICAO?: true
    DATACAD?: true
    ATIVO?: true
  }

  export type TipodoacaoMaxAggregateInputType = {
    IDTIPODOACAO?: true
    DESCRICAO?: true
    DATACAD?: true
    ATIVO?: true
  }

  export type TipodoacaoCountAggregateInputType = {
    IDTIPODOACAO?: true
    DESCRICAO?: true
    DATACAD?: true
    ATIVO?: true
    _all?: true
  }

  export type TipodoacaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tipodoacao to aggregate.
     */
    where?: tipodoacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tipodoacaos to fetch.
     */
    orderBy?: tipodoacaoOrderByWithRelationInput | tipodoacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tipodoacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tipodoacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tipodoacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tipodoacaos
    **/
    _count?: true | TipodoacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TipodoacaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TipodoacaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TipodoacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TipodoacaoMaxAggregateInputType
  }

  export type GetTipodoacaoAggregateType<T extends TipodoacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateTipodoacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTipodoacao[P]>
      : GetScalarType<T[P], AggregateTipodoacao[P]>
  }




  export type tipodoacaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tipodoacaoWhereInput
    orderBy?: tipodoacaoOrderByWithAggregationInput | tipodoacaoOrderByWithAggregationInput[]
    by: TipodoacaoScalarFieldEnum[] | TipodoacaoScalarFieldEnum
    having?: tipodoacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TipodoacaoCountAggregateInputType | true
    _avg?: TipodoacaoAvgAggregateInputType
    _sum?: TipodoacaoSumAggregateInputType
    _min?: TipodoacaoMinAggregateInputType
    _max?: TipodoacaoMaxAggregateInputType
  }

  export type TipodoacaoGroupByOutputType = {
    IDTIPODOACAO: number
    DESCRICAO: string
    DATACAD: Date | null
    ATIVO: boolean
    _count: TipodoacaoCountAggregateOutputType | null
    _avg: TipodoacaoAvgAggregateOutputType | null
    _sum: TipodoacaoSumAggregateOutputType | null
    _min: TipodoacaoMinAggregateOutputType | null
    _max: TipodoacaoMaxAggregateOutputType | null
  }

  type GetTipodoacaoGroupByPayload<T extends tipodoacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TipodoacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TipodoacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TipodoacaoGroupByOutputType[P]>
            : GetScalarType<T[P], TipodoacaoGroupByOutputType[P]>
        }
      >
    >


  export type tipodoacaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    IDTIPODOACAO?: boolean
    DESCRICAO?: boolean
    DATACAD?: boolean
    ATIVO?: boolean
  }, ExtArgs["result"]["tipodoacao"]>

  export type tipodoacaoSelectScalar = {
    IDTIPODOACAO?: boolean
    DESCRICAO?: boolean
    DATACAD?: boolean
    ATIVO?: boolean
  }



  export type $tipodoacaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tipodoacao"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      IDTIPODOACAO: number
      DESCRICAO: string
      DATACAD: Date | null
      ATIVO: boolean
    }, ExtArgs["result"]["tipodoacao"]>
    composites: {}
  }


  type tipodoacaoGetPayload<S extends boolean | null | undefined | tipodoacaoDefaultArgs> = $Result.GetResult<Prisma.$tipodoacaoPayload, S>

  type tipodoacaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<tipodoacaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TipodoacaoCountAggregateInputType | true
    }

  export interface tipodoacaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tipodoacao'], meta: { name: 'tipodoacao' } }
    /**
     * Find zero or one Tipodoacao that matches the filter.
     * @param {tipodoacaoFindUniqueArgs} args - Arguments to find a Tipodoacao
     * @example
     * // Get one Tipodoacao
     * const tipodoacao = await prisma.tipodoacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tipodoacaoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, tipodoacaoFindUniqueArgs<ExtArgs>>
    ): Prisma__tipodoacaoClient<$Result.GetResult<Prisma.$tipodoacaoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Tipodoacao that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {tipodoacaoFindUniqueOrThrowArgs} args - Arguments to find a Tipodoacao
     * @example
     * // Get one Tipodoacao
     * const tipodoacao = await prisma.tipodoacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tipodoacaoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, tipodoacaoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__tipodoacaoClient<$Result.GetResult<Prisma.$tipodoacaoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Tipodoacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tipodoacaoFindFirstArgs} args - Arguments to find a Tipodoacao
     * @example
     * // Get one Tipodoacao
     * const tipodoacao = await prisma.tipodoacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tipodoacaoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, tipodoacaoFindFirstArgs<ExtArgs>>
    ): Prisma__tipodoacaoClient<$Result.GetResult<Prisma.$tipodoacaoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Tipodoacao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tipodoacaoFindFirstOrThrowArgs} args - Arguments to find a Tipodoacao
     * @example
     * // Get one Tipodoacao
     * const tipodoacao = await prisma.tipodoacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tipodoacaoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, tipodoacaoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__tipodoacaoClient<$Result.GetResult<Prisma.$tipodoacaoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tipodoacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tipodoacaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tipodoacaos
     * const tipodoacaos = await prisma.tipodoacao.findMany()
     * 
     * // Get first 10 Tipodoacaos
     * const tipodoacaos = await prisma.tipodoacao.findMany({ take: 10 })
     * 
     * // Only select the `IDTIPODOACAO`
     * const tipodoacaoWithIDTIPODOACAOOnly = await prisma.tipodoacao.findMany({ select: { IDTIPODOACAO: true } })
     * 
    **/
    findMany<T extends tipodoacaoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tipodoacaoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tipodoacaoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Tipodoacao.
     * @param {tipodoacaoCreateArgs} args - Arguments to create a Tipodoacao.
     * @example
     * // Create one Tipodoacao
     * const Tipodoacao = await prisma.tipodoacao.create({
     *   data: {
     *     // ... data to create a Tipodoacao
     *   }
     * })
     * 
    **/
    create<T extends tipodoacaoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, tipodoacaoCreateArgs<ExtArgs>>
    ): Prisma__tipodoacaoClient<$Result.GetResult<Prisma.$tipodoacaoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tipodoacaos.
     * @param {tipodoacaoCreateManyArgs} args - Arguments to create many Tipodoacaos.
     * @example
     * // Create many Tipodoacaos
     * const tipodoacao = await prisma.tipodoacao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends tipodoacaoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tipodoacaoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tipodoacao.
     * @param {tipodoacaoDeleteArgs} args - Arguments to delete one Tipodoacao.
     * @example
     * // Delete one Tipodoacao
     * const Tipodoacao = await prisma.tipodoacao.delete({
     *   where: {
     *     // ... filter to delete one Tipodoacao
     *   }
     * })
     * 
    **/
    delete<T extends tipodoacaoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, tipodoacaoDeleteArgs<ExtArgs>>
    ): Prisma__tipodoacaoClient<$Result.GetResult<Prisma.$tipodoacaoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Tipodoacao.
     * @param {tipodoacaoUpdateArgs} args - Arguments to update one Tipodoacao.
     * @example
     * // Update one Tipodoacao
     * const tipodoacao = await prisma.tipodoacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tipodoacaoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, tipodoacaoUpdateArgs<ExtArgs>>
    ): Prisma__tipodoacaoClient<$Result.GetResult<Prisma.$tipodoacaoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tipodoacaos.
     * @param {tipodoacaoDeleteManyArgs} args - Arguments to filter Tipodoacaos to delete.
     * @example
     * // Delete a few Tipodoacaos
     * const { count } = await prisma.tipodoacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tipodoacaoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tipodoacaoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tipodoacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tipodoacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tipodoacaos
     * const tipodoacao = await prisma.tipodoacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tipodoacaoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, tipodoacaoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tipodoacao.
     * @param {tipodoacaoUpsertArgs} args - Arguments to update or create a Tipodoacao.
     * @example
     * // Update or create a Tipodoacao
     * const tipodoacao = await prisma.tipodoacao.upsert({
     *   create: {
     *     // ... data to create a Tipodoacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tipodoacao we want to update
     *   }
     * })
    **/
    upsert<T extends tipodoacaoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, tipodoacaoUpsertArgs<ExtArgs>>
    ): Prisma__tipodoacaoClient<$Result.GetResult<Prisma.$tipodoacaoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tipodoacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tipodoacaoCountArgs} args - Arguments to filter Tipodoacaos to count.
     * @example
     * // Count the number of Tipodoacaos
     * const count = await prisma.tipodoacao.count({
     *   where: {
     *     // ... the filter for the Tipodoacaos we want to count
     *   }
     * })
    **/
    count<T extends tipodoacaoCountArgs>(
      args?: Subset<T, tipodoacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TipodoacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tipodoacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipodoacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TipodoacaoAggregateArgs>(args: Subset<T, TipodoacaoAggregateArgs>): Prisma.PrismaPromise<GetTipodoacaoAggregateType<T>>

    /**
     * Group by Tipodoacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tipodoacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tipodoacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tipodoacaoGroupByArgs['orderBy'] }
        : { orderBy?: tipodoacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tipodoacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTipodoacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tipodoacao model
   */
  readonly fields: tipodoacaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tipodoacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tipodoacaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the tipodoacao model
   */ 
  interface tipodoacaoFieldRefs {
    readonly IDTIPODOACAO: FieldRef<"tipodoacao", 'Int'>
    readonly DESCRICAO: FieldRef<"tipodoacao", 'String'>
    readonly DATACAD: FieldRef<"tipodoacao", 'DateTime'>
    readonly ATIVO: FieldRef<"tipodoacao", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * tipodoacao findUnique
   */
  export type tipodoacaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipodoacao
     */
    select?: tipodoacaoSelect<ExtArgs> | null
    /**
     * Filter, which tipodoacao to fetch.
     */
    where: tipodoacaoWhereUniqueInput
  }

  /**
   * tipodoacao findUniqueOrThrow
   */
  export type tipodoacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipodoacao
     */
    select?: tipodoacaoSelect<ExtArgs> | null
    /**
     * Filter, which tipodoacao to fetch.
     */
    where: tipodoacaoWhereUniqueInput
  }

  /**
   * tipodoacao findFirst
   */
  export type tipodoacaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipodoacao
     */
    select?: tipodoacaoSelect<ExtArgs> | null
    /**
     * Filter, which tipodoacao to fetch.
     */
    where?: tipodoacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tipodoacaos to fetch.
     */
    orderBy?: tipodoacaoOrderByWithRelationInput | tipodoacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tipodoacaos.
     */
    cursor?: tipodoacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tipodoacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tipodoacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tipodoacaos.
     */
    distinct?: TipodoacaoScalarFieldEnum | TipodoacaoScalarFieldEnum[]
  }

  /**
   * tipodoacao findFirstOrThrow
   */
  export type tipodoacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipodoacao
     */
    select?: tipodoacaoSelect<ExtArgs> | null
    /**
     * Filter, which tipodoacao to fetch.
     */
    where?: tipodoacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tipodoacaos to fetch.
     */
    orderBy?: tipodoacaoOrderByWithRelationInput | tipodoacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tipodoacaos.
     */
    cursor?: tipodoacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tipodoacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tipodoacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tipodoacaos.
     */
    distinct?: TipodoacaoScalarFieldEnum | TipodoacaoScalarFieldEnum[]
  }

  /**
   * tipodoacao findMany
   */
  export type tipodoacaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipodoacao
     */
    select?: tipodoacaoSelect<ExtArgs> | null
    /**
     * Filter, which tipodoacaos to fetch.
     */
    where?: tipodoacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tipodoacaos to fetch.
     */
    orderBy?: tipodoacaoOrderByWithRelationInput | tipodoacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tipodoacaos.
     */
    cursor?: tipodoacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tipodoacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tipodoacaos.
     */
    skip?: number
    distinct?: TipodoacaoScalarFieldEnum | TipodoacaoScalarFieldEnum[]
  }

  /**
   * tipodoacao create
   */
  export type tipodoacaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipodoacao
     */
    select?: tipodoacaoSelect<ExtArgs> | null
    /**
     * The data needed to create a tipodoacao.
     */
    data: XOR<tipodoacaoCreateInput, tipodoacaoUncheckedCreateInput>
  }

  /**
   * tipodoacao createMany
   */
  export type tipodoacaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tipodoacaos.
     */
    data: tipodoacaoCreateManyInput | tipodoacaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * tipodoacao update
   */
  export type tipodoacaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipodoacao
     */
    select?: tipodoacaoSelect<ExtArgs> | null
    /**
     * The data needed to update a tipodoacao.
     */
    data: XOR<tipodoacaoUpdateInput, tipodoacaoUncheckedUpdateInput>
    /**
     * Choose, which tipodoacao to update.
     */
    where: tipodoacaoWhereUniqueInput
  }

  /**
   * tipodoacao updateMany
   */
  export type tipodoacaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tipodoacaos.
     */
    data: XOR<tipodoacaoUpdateManyMutationInput, tipodoacaoUncheckedUpdateManyInput>
    /**
     * Filter which tipodoacaos to update
     */
    where?: tipodoacaoWhereInput
  }

  /**
   * tipodoacao upsert
   */
  export type tipodoacaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipodoacao
     */
    select?: tipodoacaoSelect<ExtArgs> | null
    /**
     * The filter to search for the tipodoacao to update in case it exists.
     */
    where: tipodoacaoWhereUniqueInput
    /**
     * In case the tipodoacao found by the `where` argument doesn't exist, create a new tipodoacao with this data.
     */
    create: XOR<tipodoacaoCreateInput, tipodoacaoUncheckedCreateInput>
    /**
     * In case the tipodoacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tipodoacaoUpdateInput, tipodoacaoUncheckedUpdateInput>
  }

  /**
   * tipodoacao delete
   */
  export type tipodoacaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipodoacao
     */
    select?: tipodoacaoSelect<ExtArgs> | null
    /**
     * Filter which tipodoacao to delete.
     */
    where: tipodoacaoWhereUniqueInput
  }

  /**
   * tipodoacao deleteMany
   */
  export type tipodoacaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tipodoacaos to delete
     */
    where?: tipodoacaoWhereInput
  }

  /**
   * tipodoacao without action
   */
  export type tipodoacaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipodoacao
     */
    select?: tipodoacaoSelect<ExtArgs> | null
  }


  /**
   * Model usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    IDUSUARIO: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    IDUSUARIO: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    IDUSUARIO: number | null
    USUARIO: string | null
    SENHA: string | null
    EMAIL: string | null
    ROLE: string | null
    DATACAD: Date | null
    ATIVO: boolean | null
  }

  export type UsuarioMaxAggregateOutputType = {
    IDUSUARIO: number | null
    USUARIO: string | null
    SENHA: string | null
    EMAIL: string | null
    ROLE: string | null
    DATACAD: Date | null
    ATIVO: boolean | null
  }

  export type UsuarioCountAggregateOutputType = {
    IDUSUARIO: number
    USUARIO: number
    SENHA: number
    EMAIL: number
    ROLE: number
    DATACAD: number
    ATIVO: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    IDUSUARIO?: true
  }

  export type UsuarioSumAggregateInputType = {
    IDUSUARIO?: true
  }

  export type UsuarioMinAggregateInputType = {
    IDUSUARIO?: true
    USUARIO?: true
    SENHA?: true
    EMAIL?: true
    ROLE?: true
    DATACAD?: true
    ATIVO?: true
  }

  export type UsuarioMaxAggregateInputType = {
    IDUSUARIO?: true
    USUARIO?: true
    SENHA?: true
    EMAIL?: true
    ROLE?: true
    DATACAD?: true
    ATIVO?: true
  }

  export type UsuarioCountAggregateInputType = {
    IDUSUARIO?: true
    USUARIO?: true
    SENHA?: true
    EMAIL?: true
    ROLE?: true
    DATACAD?: true
    ATIVO?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuario to aggregate.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type usuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usuarioWhereInput
    orderBy?: usuarioOrderByWithAggregationInput | usuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: usuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    IDUSUARIO: number
    USUARIO: string
    SENHA: string
    EMAIL: string | null
    ROLE: string | null
    DATACAD: Date | null
    ATIVO: boolean
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends usuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type usuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    IDUSUARIO?: boolean
    USUARIO?: boolean
    SENHA?: boolean
    EMAIL?: boolean
    ROLE?: boolean
    DATACAD?: boolean
    ATIVO?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type usuarioSelectScalar = {
    IDUSUARIO?: boolean
    USUARIO?: boolean
    SENHA?: boolean
    EMAIL?: boolean
    ROLE?: boolean
    DATACAD?: boolean
    ATIVO?: boolean
  }



  export type $usuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "usuario"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      IDUSUARIO: number
      USUARIO: string
      SENHA: string
      EMAIL: string | null
      ROLE: string | null
      DATACAD: Date | null
      ATIVO: boolean
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }


  type usuarioGetPayload<S extends boolean | null | undefined | usuarioDefaultArgs> = $Result.GetResult<Prisma.$usuarioPayload, S>

  type usuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface usuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usuario'], meta: { name: 'usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {usuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usuarioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioFindUniqueArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usuarioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usuarioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindFirstArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usuarioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `IDUSUARIO`
     * const usuarioWithIDUSUARIOOnly = await prisma.usuario.findMany({ select: { IDUSUARIO: true } })
     * 
    **/
    findMany<T extends usuarioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Usuario.
     * @param {usuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends usuarioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioCreateArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Usuarios.
     * @param {usuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends usuarioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {usuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends usuarioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioDeleteArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {usuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usuarioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpdateArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {usuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usuarioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usuarioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {usuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends usuarioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpsertArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuarioCountArgs>(
      args?: Subset<T, usuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usuarioGroupByArgs['orderBy'] }
        : { orderBy?: usuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the usuario model
   */
  readonly fields: usuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the usuario model
   */ 
  interface usuarioFieldRefs {
    readonly IDUSUARIO: FieldRef<"usuario", 'Int'>
    readonly USUARIO: FieldRef<"usuario", 'String'>
    readonly SENHA: FieldRef<"usuario", 'String'>
    readonly EMAIL: FieldRef<"usuario", 'String'>
    readonly ROLE: FieldRef<"usuario", 'String'>
    readonly DATACAD: FieldRef<"usuario", 'DateTime'>
    readonly ATIVO: FieldRef<"usuario", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * usuario findUnique
   */
  export type usuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario findUniqueOrThrow
   */
  export type usuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario findFirst
   */
  export type usuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * usuario findFirstOrThrow
   */
  export type usuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * usuario findMany
   */
  export type usuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * usuario create
   */
  export type usuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * The data needed to create a usuario.
     */
    data: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
  }

  /**
   * usuario createMany
   */
  export type usuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usuarios.
     */
    data: usuarioCreateManyInput | usuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * usuario update
   */
  export type usuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * The data needed to update a usuario.
     */
    data: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
    /**
     * Choose, which usuario to update.
     */
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario updateMany
   */
  export type usuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuarioUpdateManyMutationInput, usuarioUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuarioWhereInput
  }

  /**
   * usuario upsert
   */
  export type usuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * The filter to search for the usuario to update in case it exists.
     */
    where: usuarioWhereUniqueInput
    /**
     * In case the usuario found by the `where` argument doesn't exist, create a new usuario with this data.
     */
    create: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
    /**
     * In case the usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
  }

  /**
   * usuario delete
   */
  export type usuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Filter which usuario to delete.
     */
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario deleteMany
   */
  export type usuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to delete
     */
    where?: usuarioWhereInput
  }

  /**
   * usuario without action
   */
  export type usuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BeneficiarioScalarFieldEnum: {
    IDBENEFICIARIO: 'IDBENEFICIARIO',
    NOME: 'NOME',
    DATANASC: 'DATANASC',
    TIPOPESSOA: 'TIPOPESSOA',
    GENERO: 'GENERO',
    CPF: 'CPF',
    RG: 'RG',
    CNPJ: 'CNPJ',
    CONTATO1: 'CONTATO1',
    CONTATO2: 'CONTATO2',
    CEP: 'CEP',
    LOGRADOUDO: 'LOGRADOUDO',
    NUMERO: 'NUMERO',
    COMPLEMENTO: 'COMPLEMENTO',
    BAIRRO: 'BAIRRO',
    CIDADE: 'CIDADE',
    SIGLAESTADO: 'SIGLAESTADO',
    OBSERVACOES: 'OBSERVACOES',
    DATACAD: 'DATACAD',
    ATIVO: 'ATIVO'
  };

  export type BeneficiarioScalarFieldEnum = (typeof BeneficiarioScalarFieldEnum)[keyof typeof BeneficiarioScalarFieldEnum]


  export const DoadorScalarFieldEnum: {
    IDDOADOR: 'IDDOADOR',
    NOME: 'NOME',
    TIPOPESSOA: 'TIPOPESSOA',
    CPF: 'CPF',
    CNPJ: 'CNPJ',
    CONTATO1: 'CONTATO1',
    CONTATO2: 'CONTATO2',
    CEP: 'CEP',
    LOGRADOUDO: 'LOGRADOUDO',
    NUMERO: 'NUMERO',
    COMPLEMENTO: 'COMPLEMENTO',
    BAIRRO: 'BAIRRO',
    CIDADE: 'CIDADE',
    SIGLAESTADO: 'SIGLAESTADO',
    OBSERVACOES: 'OBSERVACOES',
    DATACAD: 'DATACAD',
    ATIVO: 'ATIVO'
  };

  export type DoadorScalarFieldEnum = (typeof DoadorScalarFieldEnum)[keyof typeof DoadorScalarFieldEnum]


  export const EmpresaScalarFieldEnum: {
    IDEMPRESA: 'IDEMPRESA',
    NOMEFANTASIA: 'NOMEFANTASIA',
    RAZAOSOCIAL: 'RAZAOSOCIAL',
    CNPJ: 'CNPJ',
    CONTATO1: 'CONTATO1',
    CONTATO2: 'CONTATO2',
    CEP: 'CEP',
    LOGRADOURO: 'LOGRADOURO',
    NUMERO: 'NUMERO',
    COMPLEMENTO: 'COMPLEMENTO',
    BAIRRO: 'BAIRRO',
    CIDADE: 'CIDADE',
    SIGLAESTADO: 'SIGLAESTADO'
  };

  export type EmpresaScalarFieldEnum = (typeof EmpresaScalarFieldEnum)[keyof typeof EmpresaScalarFieldEnum]


  export const TipodoacaoScalarFieldEnum: {
    IDTIPODOACAO: 'IDTIPODOACAO',
    DESCRICAO: 'DESCRICAO',
    DATACAD: 'DATACAD',
    ATIVO: 'ATIVO'
  };

  export type TipodoacaoScalarFieldEnum = (typeof TipodoacaoScalarFieldEnum)[keyof typeof TipodoacaoScalarFieldEnum]


  export const UsuarioScalarFieldEnum: {
    IDUSUARIO: 'IDUSUARIO',
    USUARIO: 'USUARIO',
    SENHA: 'SENHA',
    EMAIL: 'EMAIL',
    ROLE: 'ROLE',
    DATACAD: 'DATACAD',
    ATIVO: 'ATIVO'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type beneficiarioWhereInput = {
    AND?: beneficiarioWhereInput | beneficiarioWhereInput[]
    OR?: beneficiarioWhereInput[]
    NOT?: beneficiarioWhereInput | beneficiarioWhereInput[]
    IDBENEFICIARIO?: IntFilter<"beneficiario"> | number
    NOME?: StringFilter<"beneficiario"> | string
    DATANASC?: DateTimeNullableFilter<"beneficiario"> | Date | string | null
    TIPOPESSOA?: StringFilter<"beneficiario"> | string
    GENERO?: StringNullableFilter<"beneficiario"> | string | null
    CPF?: StringNullableFilter<"beneficiario"> | string | null
    RG?: StringNullableFilter<"beneficiario"> | string | null
    CNPJ?: StringNullableFilter<"beneficiario"> | string | null
    CONTATO1?: StringNullableFilter<"beneficiario"> | string | null
    CONTATO2?: StringNullableFilter<"beneficiario"> | string | null
    CEP?: StringNullableFilter<"beneficiario"> | string | null
    LOGRADOUDO?: StringNullableFilter<"beneficiario"> | string | null
    NUMERO?: StringNullableFilter<"beneficiario"> | string | null
    COMPLEMENTO?: StringNullableFilter<"beneficiario"> | string | null
    BAIRRO?: StringNullableFilter<"beneficiario"> | string | null
    CIDADE?: StringNullableFilter<"beneficiario"> | string | null
    SIGLAESTADO?: StringNullableFilter<"beneficiario"> | string | null
    OBSERVACOES?: StringNullableFilter<"beneficiario"> | string | null
    DATACAD?: DateTimeNullableFilter<"beneficiario"> | Date | string | null
    ATIVO?: BoolFilter<"beneficiario"> | boolean
  }

  export type beneficiarioOrderByWithRelationInput = {
    IDBENEFICIARIO?: SortOrder
    NOME?: SortOrder
    DATANASC?: SortOrderInput | SortOrder
    TIPOPESSOA?: SortOrder
    GENERO?: SortOrderInput | SortOrder
    CPF?: SortOrderInput | SortOrder
    RG?: SortOrderInput | SortOrder
    CNPJ?: SortOrderInput | SortOrder
    CONTATO1?: SortOrderInput | SortOrder
    CONTATO2?: SortOrderInput | SortOrder
    CEP?: SortOrderInput | SortOrder
    LOGRADOUDO?: SortOrderInput | SortOrder
    NUMERO?: SortOrderInput | SortOrder
    COMPLEMENTO?: SortOrderInput | SortOrder
    BAIRRO?: SortOrderInput | SortOrder
    CIDADE?: SortOrderInput | SortOrder
    SIGLAESTADO?: SortOrderInput | SortOrder
    OBSERVACOES?: SortOrderInput | SortOrder
    DATACAD?: SortOrderInput | SortOrder
    ATIVO?: SortOrder
  }

  export type beneficiarioWhereUniqueInput = Prisma.AtLeast<{
    IDBENEFICIARIO?: number
    AND?: beneficiarioWhereInput | beneficiarioWhereInput[]
    OR?: beneficiarioWhereInput[]
    NOT?: beneficiarioWhereInput | beneficiarioWhereInput[]
    NOME?: StringFilter<"beneficiario"> | string
    DATANASC?: DateTimeNullableFilter<"beneficiario"> | Date | string | null
    TIPOPESSOA?: StringFilter<"beneficiario"> | string
    GENERO?: StringNullableFilter<"beneficiario"> | string | null
    CPF?: StringNullableFilter<"beneficiario"> | string | null
    RG?: StringNullableFilter<"beneficiario"> | string | null
    CNPJ?: StringNullableFilter<"beneficiario"> | string | null
    CONTATO1?: StringNullableFilter<"beneficiario"> | string | null
    CONTATO2?: StringNullableFilter<"beneficiario"> | string | null
    CEP?: StringNullableFilter<"beneficiario"> | string | null
    LOGRADOUDO?: StringNullableFilter<"beneficiario"> | string | null
    NUMERO?: StringNullableFilter<"beneficiario"> | string | null
    COMPLEMENTO?: StringNullableFilter<"beneficiario"> | string | null
    BAIRRO?: StringNullableFilter<"beneficiario"> | string | null
    CIDADE?: StringNullableFilter<"beneficiario"> | string | null
    SIGLAESTADO?: StringNullableFilter<"beneficiario"> | string | null
    OBSERVACOES?: StringNullableFilter<"beneficiario"> | string | null
    DATACAD?: DateTimeNullableFilter<"beneficiario"> | Date | string | null
    ATIVO?: BoolFilter<"beneficiario"> | boolean
  }, "IDBENEFICIARIO">

  export type beneficiarioOrderByWithAggregationInput = {
    IDBENEFICIARIO?: SortOrder
    NOME?: SortOrder
    DATANASC?: SortOrderInput | SortOrder
    TIPOPESSOA?: SortOrder
    GENERO?: SortOrderInput | SortOrder
    CPF?: SortOrderInput | SortOrder
    RG?: SortOrderInput | SortOrder
    CNPJ?: SortOrderInput | SortOrder
    CONTATO1?: SortOrderInput | SortOrder
    CONTATO2?: SortOrderInput | SortOrder
    CEP?: SortOrderInput | SortOrder
    LOGRADOUDO?: SortOrderInput | SortOrder
    NUMERO?: SortOrderInput | SortOrder
    COMPLEMENTO?: SortOrderInput | SortOrder
    BAIRRO?: SortOrderInput | SortOrder
    CIDADE?: SortOrderInput | SortOrder
    SIGLAESTADO?: SortOrderInput | SortOrder
    OBSERVACOES?: SortOrderInput | SortOrder
    DATACAD?: SortOrderInput | SortOrder
    ATIVO?: SortOrder
    _count?: beneficiarioCountOrderByAggregateInput
    _avg?: beneficiarioAvgOrderByAggregateInput
    _max?: beneficiarioMaxOrderByAggregateInput
    _min?: beneficiarioMinOrderByAggregateInput
    _sum?: beneficiarioSumOrderByAggregateInput
  }

  export type beneficiarioScalarWhereWithAggregatesInput = {
    AND?: beneficiarioScalarWhereWithAggregatesInput | beneficiarioScalarWhereWithAggregatesInput[]
    OR?: beneficiarioScalarWhereWithAggregatesInput[]
    NOT?: beneficiarioScalarWhereWithAggregatesInput | beneficiarioScalarWhereWithAggregatesInput[]
    IDBENEFICIARIO?: IntWithAggregatesFilter<"beneficiario"> | number
    NOME?: StringWithAggregatesFilter<"beneficiario"> | string
    DATANASC?: DateTimeNullableWithAggregatesFilter<"beneficiario"> | Date | string | null
    TIPOPESSOA?: StringWithAggregatesFilter<"beneficiario"> | string
    GENERO?: StringNullableWithAggregatesFilter<"beneficiario"> | string | null
    CPF?: StringNullableWithAggregatesFilter<"beneficiario"> | string | null
    RG?: StringNullableWithAggregatesFilter<"beneficiario"> | string | null
    CNPJ?: StringNullableWithAggregatesFilter<"beneficiario"> | string | null
    CONTATO1?: StringNullableWithAggregatesFilter<"beneficiario"> | string | null
    CONTATO2?: StringNullableWithAggregatesFilter<"beneficiario"> | string | null
    CEP?: StringNullableWithAggregatesFilter<"beneficiario"> | string | null
    LOGRADOUDO?: StringNullableWithAggregatesFilter<"beneficiario"> | string | null
    NUMERO?: StringNullableWithAggregatesFilter<"beneficiario"> | string | null
    COMPLEMENTO?: StringNullableWithAggregatesFilter<"beneficiario"> | string | null
    BAIRRO?: StringNullableWithAggregatesFilter<"beneficiario"> | string | null
    CIDADE?: StringNullableWithAggregatesFilter<"beneficiario"> | string | null
    SIGLAESTADO?: StringNullableWithAggregatesFilter<"beneficiario"> | string | null
    OBSERVACOES?: StringNullableWithAggregatesFilter<"beneficiario"> | string | null
    DATACAD?: DateTimeNullableWithAggregatesFilter<"beneficiario"> | Date | string | null
    ATIVO?: BoolWithAggregatesFilter<"beneficiario"> | boolean
  }

  export type doadorWhereInput = {
    AND?: doadorWhereInput | doadorWhereInput[]
    OR?: doadorWhereInput[]
    NOT?: doadorWhereInput | doadorWhereInput[]
    IDDOADOR?: IntFilter<"doador"> | number
    NOME?: StringFilter<"doador"> | string
    TIPOPESSOA?: StringFilter<"doador"> | string
    CPF?: StringNullableFilter<"doador"> | string | null
    CNPJ?: StringNullableFilter<"doador"> | string | null
    CONTATO1?: StringNullableFilter<"doador"> | string | null
    CONTATO2?: StringNullableFilter<"doador"> | string | null
    CEP?: StringNullableFilter<"doador"> | string | null
    LOGRADOUDO?: StringNullableFilter<"doador"> | string | null
    NUMERO?: StringNullableFilter<"doador"> | string | null
    COMPLEMENTO?: StringNullableFilter<"doador"> | string | null
    BAIRRO?: StringNullableFilter<"doador"> | string | null
    CIDADE?: StringNullableFilter<"doador"> | string | null
    SIGLAESTADO?: StringNullableFilter<"doador"> | string | null
    OBSERVACOES?: StringNullableFilter<"doador"> | string | null
    DATACAD?: DateTimeNullableFilter<"doador"> | Date | string | null
    ATIVO?: BoolFilter<"doador"> | boolean
  }

  export type doadorOrderByWithRelationInput = {
    IDDOADOR?: SortOrder
    NOME?: SortOrder
    TIPOPESSOA?: SortOrder
    CPF?: SortOrderInput | SortOrder
    CNPJ?: SortOrderInput | SortOrder
    CONTATO1?: SortOrderInput | SortOrder
    CONTATO2?: SortOrderInput | SortOrder
    CEP?: SortOrderInput | SortOrder
    LOGRADOUDO?: SortOrderInput | SortOrder
    NUMERO?: SortOrderInput | SortOrder
    COMPLEMENTO?: SortOrderInput | SortOrder
    BAIRRO?: SortOrderInput | SortOrder
    CIDADE?: SortOrderInput | SortOrder
    SIGLAESTADO?: SortOrderInput | SortOrder
    OBSERVACOES?: SortOrderInput | SortOrder
    DATACAD?: SortOrderInput | SortOrder
    ATIVO?: SortOrder
  }

  export type doadorWhereUniqueInput = Prisma.AtLeast<{
    IDDOADOR?: number
    AND?: doadorWhereInput | doadorWhereInput[]
    OR?: doadorWhereInput[]
    NOT?: doadorWhereInput | doadorWhereInput[]
    NOME?: StringFilter<"doador"> | string
    TIPOPESSOA?: StringFilter<"doador"> | string
    CPF?: StringNullableFilter<"doador"> | string | null
    CNPJ?: StringNullableFilter<"doador"> | string | null
    CONTATO1?: StringNullableFilter<"doador"> | string | null
    CONTATO2?: StringNullableFilter<"doador"> | string | null
    CEP?: StringNullableFilter<"doador"> | string | null
    LOGRADOUDO?: StringNullableFilter<"doador"> | string | null
    NUMERO?: StringNullableFilter<"doador"> | string | null
    COMPLEMENTO?: StringNullableFilter<"doador"> | string | null
    BAIRRO?: StringNullableFilter<"doador"> | string | null
    CIDADE?: StringNullableFilter<"doador"> | string | null
    SIGLAESTADO?: StringNullableFilter<"doador"> | string | null
    OBSERVACOES?: StringNullableFilter<"doador"> | string | null
    DATACAD?: DateTimeNullableFilter<"doador"> | Date | string | null
    ATIVO?: BoolFilter<"doador"> | boolean
  }, "IDDOADOR">

  export type doadorOrderByWithAggregationInput = {
    IDDOADOR?: SortOrder
    NOME?: SortOrder
    TIPOPESSOA?: SortOrder
    CPF?: SortOrderInput | SortOrder
    CNPJ?: SortOrderInput | SortOrder
    CONTATO1?: SortOrderInput | SortOrder
    CONTATO2?: SortOrderInput | SortOrder
    CEP?: SortOrderInput | SortOrder
    LOGRADOUDO?: SortOrderInput | SortOrder
    NUMERO?: SortOrderInput | SortOrder
    COMPLEMENTO?: SortOrderInput | SortOrder
    BAIRRO?: SortOrderInput | SortOrder
    CIDADE?: SortOrderInput | SortOrder
    SIGLAESTADO?: SortOrderInput | SortOrder
    OBSERVACOES?: SortOrderInput | SortOrder
    DATACAD?: SortOrderInput | SortOrder
    ATIVO?: SortOrder
    _count?: doadorCountOrderByAggregateInput
    _avg?: doadorAvgOrderByAggregateInput
    _max?: doadorMaxOrderByAggregateInput
    _min?: doadorMinOrderByAggregateInput
    _sum?: doadorSumOrderByAggregateInput
  }

  export type doadorScalarWhereWithAggregatesInput = {
    AND?: doadorScalarWhereWithAggregatesInput | doadorScalarWhereWithAggregatesInput[]
    OR?: doadorScalarWhereWithAggregatesInput[]
    NOT?: doadorScalarWhereWithAggregatesInput | doadorScalarWhereWithAggregatesInput[]
    IDDOADOR?: IntWithAggregatesFilter<"doador"> | number
    NOME?: StringWithAggregatesFilter<"doador"> | string
    TIPOPESSOA?: StringWithAggregatesFilter<"doador"> | string
    CPF?: StringNullableWithAggregatesFilter<"doador"> | string | null
    CNPJ?: StringNullableWithAggregatesFilter<"doador"> | string | null
    CONTATO1?: StringNullableWithAggregatesFilter<"doador"> | string | null
    CONTATO2?: StringNullableWithAggregatesFilter<"doador"> | string | null
    CEP?: StringNullableWithAggregatesFilter<"doador"> | string | null
    LOGRADOUDO?: StringNullableWithAggregatesFilter<"doador"> | string | null
    NUMERO?: StringNullableWithAggregatesFilter<"doador"> | string | null
    COMPLEMENTO?: StringNullableWithAggregatesFilter<"doador"> | string | null
    BAIRRO?: StringNullableWithAggregatesFilter<"doador"> | string | null
    CIDADE?: StringNullableWithAggregatesFilter<"doador"> | string | null
    SIGLAESTADO?: StringNullableWithAggregatesFilter<"doador"> | string | null
    OBSERVACOES?: StringNullableWithAggregatesFilter<"doador"> | string | null
    DATACAD?: DateTimeNullableWithAggregatesFilter<"doador"> | Date | string | null
    ATIVO?: BoolWithAggregatesFilter<"doador"> | boolean
  }

  export type empresaWhereInput = {
    AND?: empresaWhereInput | empresaWhereInput[]
    OR?: empresaWhereInput[]
    NOT?: empresaWhereInput | empresaWhereInput[]
    IDEMPRESA?: IntFilter<"empresa"> | number
    NOMEFANTASIA?: StringFilter<"empresa"> | string
    RAZAOSOCIAL?: StringNullableFilter<"empresa"> | string | null
    CNPJ?: StringNullableFilter<"empresa"> | string | null
    CONTATO1?: StringNullableFilter<"empresa"> | string | null
    CONTATO2?: StringNullableFilter<"empresa"> | string | null
    CEP?: StringNullableFilter<"empresa"> | string | null
    LOGRADOURO?: StringNullableFilter<"empresa"> | string | null
    NUMERO?: StringNullableFilter<"empresa"> | string | null
    COMPLEMENTO?: StringNullableFilter<"empresa"> | string | null
    BAIRRO?: StringNullableFilter<"empresa"> | string | null
    CIDADE?: StringNullableFilter<"empresa"> | string | null
    SIGLAESTADO?: StringNullableFilter<"empresa"> | string | null
  }

  export type empresaOrderByWithRelationInput = {
    IDEMPRESA?: SortOrder
    NOMEFANTASIA?: SortOrder
    RAZAOSOCIAL?: SortOrderInput | SortOrder
    CNPJ?: SortOrderInput | SortOrder
    CONTATO1?: SortOrderInput | SortOrder
    CONTATO2?: SortOrderInput | SortOrder
    CEP?: SortOrderInput | SortOrder
    LOGRADOURO?: SortOrderInput | SortOrder
    NUMERO?: SortOrderInput | SortOrder
    COMPLEMENTO?: SortOrderInput | SortOrder
    BAIRRO?: SortOrderInput | SortOrder
    CIDADE?: SortOrderInput | SortOrder
    SIGLAESTADO?: SortOrderInput | SortOrder
  }

  export type empresaWhereUniqueInput = Prisma.AtLeast<{
    IDEMPRESA?: number
    AND?: empresaWhereInput | empresaWhereInput[]
    OR?: empresaWhereInput[]
    NOT?: empresaWhereInput | empresaWhereInput[]
    NOMEFANTASIA?: StringFilter<"empresa"> | string
    RAZAOSOCIAL?: StringNullableFilter<"empresa"> | string | null
    CNPJ?: StringNullableFilter<"empresa"> | string | null
    CONTATO1?: StringNullableFilter<"empresa"> | string | null
    CONTATO2?: StringNullableFilter<"empresa"> | string | null
    CEP?: StringNullableFilter<"empresa"> | string | null
    LOGRADOURO?: StringNullableFilter<"empresa"> | string | null
    NUMERO?: StringNullableFilter<"empresa"> | string | null
    COMPLEMENTO?: StringNullableFilter<"empresa"> | string | null
    BAIRRO?: StringNullableFilter<"empresa"> | string | null
    CIDADE?: StringNullableFilter<"empresa"> | string | null
    SIGLAESTADO?: StringNullableFilter<"empresa"> | string | null
  }, "IDEMPRESA">

  export type empresaOrderByWithAggregationInput = {
    IDEMPRESA?: SortOrder
    NOMEFANTASIA?: SortOrder
    RAZAOSOCIAL?: SortOrderInput | SortOrder
    CNPJ?: SortOrderInput | SortOrder
    CONTATO1?: SortOrderInput | SortOrder
    CONTATO2?: SortOrderInput | SortOrder
    CEP?: SortOrderInput | SortOrder
    LOGRADOURO?: SortOrderInput | SortOrder
    NUMERO?: SortOrderInput | SortOrder
    COMPLEMENTO?: SortOrderInput | SortOrder
    BAIRRO?: SortOrderInput | SortOrder
    CIDADE?: SortOrderInput | SortOrder
    SIGLAESTADO?: SortOrderInput | SortOrder
    _count?: empresaCountOrderByAggregateInput
    _avg?: empresaAvgOrderByAggregateInput
    _max?: empresaMaxOrderByAggregateInput
    _min?: empresaMinOrderByAggregateInput
    _sum?: empresaSumOrderByAggregateInput
  }

  export type empresaScalarWhereWithAggregatesInput = {
    AND?: empresaScalarWhereWithAggregatesInput | empresaScalarWhereWithAggregatesInput[]
    OR?: empresaScalarWhereWithAggregatesInput[]
    NOT?: empresaScalarWhereWithAggregatesInput | empresaScalarWhereWithAggregatesInput[]
    IDEMPRESA?: IntWithAggregatesFilter<"empresa"> | number
    NOMEFANTASIA?: StringWithAggregatesFilter<"empresa"> | string
    RAZAOSOCIAL?: StringNullableWithAggregatesFilter<"empresa"> | string | null
    CNPJ?: StringNullableWithAggregatesFilter<"empresa"> | string | null
    CONTATO1?: StringNullableWithAggregatesFilter<"empresa"> | string | null
    CONTATO2?: StringNullableWithAggregatesFilter<"empresa"> | string | null
    CEP?: StringNullableWithAggregatesFilter<"empresa"> | string | null
    LOGRADOURO?: StringNullableWithAggregatesFilter<"empresa"> | string | null
    NUMERO?: StringNullableWithAggregatesFilter<"empresa"> | string | null
    COMPLEMENTO?: StringNullableWithAggregatesFilter<"empresa"> | string | null
    BAIRRO?: StringNullableWithAggregatesFilter<"empresa"> | string | null
    CIDADE?: StringNullableWithAggregatesFilter<"empresa"> | string | null
    SIGLAESTADO?: StringNullableWithAggregatesFilter<"empresa"> | string | null
  }

  export type tipodoacaoWhereInput = {
    AND?: tipodoacaoWhereInput | tipodoacaoWhereInput[]
    OR?: tipodoacaoWhereInput[]
    NOT?: tipodoacaoWhereInput | tipodoacaoWhereInput[]
    IDTIPODOACAO?: IntFilter<"tipodoacao"> | number
    DESCRICAO?: StringFilter<"tipodoacao"> | string
    DATACAD?: DateTimeNullableFilter<"tipodoacao"> | Date | string | null
    ATIVO?: BoolFilter<"tipodoacao"> | boolean
  }

  export type tipodoacaoOrderByWithRelationInput = {
    IDTIPODOACAO?: SortOrder
    DESCRICAO?: SortOrder
    DATACAD?: SortOrderInput | SortOrder
    ATIVO?: SortOrder
  }

  export type tipodoacaoWhereUniqueInput = Prisma.AtLeast<{
    IDTIPODOACAO?: number
    AND?: tipodoacaoWhereInput | tipodoacaoWhereInput[]
    OR?: tipodoacaoWhereInput[]
    NOT?: tipodoacaoWhereInput | tipodoacaoWhereInput[]
    DESCRICAO?: StringFilter<"tipodoacao"> | string
    DATACAD?: DateTimeNullableFilter<"tipodoacao"> | Date | string | null
    ATIVO?: BoolFilter<"tipodoacao"> | boolean
  }, "IDTIPODOACAO">

  export type tipodoacaoOrderByWithAggregationInput = {
    IDTIPODOACAO?: SortOrder
    DESCRICAO?: SortOrder
    DATACAD?: SortOrderInput | SortOrder
    ATIVO?: SortOrder
    _count?: tipodoacaoCountOrderByAggregateInput
    _avg?: tipodoacaoAvgOrderByAggregateInput
    _max?: tipodoacaoMaxOrderByAggregateInput
    _min?: tipodoacaoMinOrderByAggregateInput
    _sum?: tipodoacaoSumOrderByAggregateInput
  }

  export type tipodoacaoScalarWhereWithAggregatesInput = {
    AND?: tipodoacaoScalarWhereWithAggregatesInput | tipodoacaoScalarWhereWithAggregatesInput[]
    OR?: tipodoacaoScalarWhereWithAggregatesInput[]
    NOT?: tipodoacaoScalarWhereWithAggregatesInput | tipodoacaoScalarWhereWithAggregatesInput[]
    IDTIPODOACAO?: IntWithAggregatesFilter<"tipodoacao"> | number
    DESCRICAO?: StringWithAggregatesFilter<"tipodoacao"> | string
    DATACAD?: DateTimeNullableWithAggregatesFilter<"tipodoacao"> | Date | string | null
    ATIVO?: BoolWithAggregatesFilter<"tipodoacao"> | boolean
  }

  export type usuarioWhereInput = {
    AND?: usuarioWhereInput | usuarioWhereInput[]
    OR?: usuarioWhereInput[]
    NOT?: usuarioWhereInput | usuarioWhereInput[]
    IDUSUARIO?: IntFilter<"usuario"> | number
    USUARIO?: StringFilter<"usuario"> | string
    SENHA?: StringFilter<"usuario"> | string
    EMAIL?: StringNullableFilter<"usuario"> | string | null
    ROLE?: StringNullableFilter<"usuario"> | string | null
    DATACAD?: DateTimeNullableFilter<"usuario"> | Date | string | null
    ATIVO?: BoolFilter<"usuario"> | boolean
  }

  export type usuarioOrderByWithRelationInput = {
    IDUSUARIO?: SortOrder
    USUARIO?: SortOrder
    SENHA?: SortOrder
    EMAIL?: SortOrderInput | SortOrder
    ROLE?: SortOrderInput | SortOrder
    DATACAD?: SortOrderInput | SortOrder
    ATIVO?: SortOrder
  }

  export type usuarioWhereUniqueInput = Prisma.AtLeast<{
    IDUSUARIO?: number
    AND?: usuarioWhereInput | usuarioWhereInput[]
    OR?: usuarioWhereInput[]
    NOT?: usuarioWhereInput | usuarioWhereInput[]
    USUARIO?: StringFilter<"usuario"> | string
    SENHA?: StringFilter<"usuario"> | string
    EMAIL?: StringNullableFilter<"usuario"> | string | null
    ROLE?: StringNullableFilter<"usuario"> | string | null
    DATACAD?: DateTimeNullableFilter<"usuario"> | Date | string | null
    ATIVO?: BoolFilter<"usuario"> | boolean
  }, "IDUSUARIO">

  export type usuarioOrderByWithAggregationInput = {
    IDUSUARIO?: SortOrder
    USUARIO?: SortOrder
    SENHA?: SortOrder
    EMAIL?: SortOrderInput | SortOrder
    ROLE?: SortOrderInput | SortOrder
    DATACAD?: SortOrderInput | SortOrder
    ATIVO?: SortOrder
    _count?: usuarioCountOrderByAggregateInput
    _avg?: usuarioAvgOrderByAggregateInput
    _max?: usuarioMaxOrderByAggregateInput
    _min?: usuarioMinOrderByAggregateInput
    _sum?: usuarioSumOrderByAggregateInput
  }

  export type usuarioScalarWhereWithAggregatesInput = {
    AND?: usuarioScalarWhereWithAggregatesInput | usuarioScalarWhereWithAggregatesInput[]
    OR?: usuarioScalarWhereWithAggregatesInput[]
    NOT?: usuarioScalarWhereWithAggregatesInput | usuarioScalarWhereWithAggregatesInput[]
    IDUSUARIO?: IntWithAggregatesFilter<"usuario"> | number
    USUARIO?: StringWithAggregatesFilter<"usuario"> | string
    SENHA?: StringWithAggregatesFilter<"usuario"> | string
    EMAIL?: StringNullableWithAggregatesFilter<"usuario"> | string | null
    ROLE?: StringNullableWithAggregatesFilter<"usuario"> | string | null
    DATACAD?: DateTimeNullableWithAggregatesFilter<"usuario"> | Date | string | null
    ATIVO?: BoolWithAggregatesFilter<"usuario"> | boolean
  }

  export type beneficiarioCreateInput = {
    NOME: string
    DATANASC?: Date | string | null
    TIPOPESSOA?: string
    GENERO?: string | null
    CPF?: string | null
    RG?: string | null
    CNPJ?: string | null
    CONTATO1?: string | null
    CONTATO2?: string | null
    CEP?: string | null
    LOGRADOUDO?: string | null
    NUMERO?: string | null
    COMPLEMENTO?: string | null
    BAIRRO?: string | null
    CIDADE?: string | null
    SIGLAESTADO?: string | null
    OBSERVACOES?: string | null
    DATACAD?: Date | string | null
    ATIVO: boolean
  }

  export type beneficiarioUncheckedCreateInput = {
    IDBENEFICIARIO?: number
    NOME: string
    DATANASC?: Date | string | null
    TIPOPESSOA?: string
    GENERO?: string | null
    CPF?: string | null
    RG?: string | null
    CNPJ?: string | null
    CONTATO1?: string | null
    CONTATO2?: string | null
    CEP?: string | null
    LOGRADOUDO?: string | null
    NUMERO?: string | null
    COMPLEMENTO?: string | null
    BAIRRO?: string | null
    CIDADE?: string | null
    SIGLAESTADO?: string | null
    OBSERVACOES?: string | null
    DATACAD?: Date | string | null
    ATIVO: boolean
  }

  export type beneficiarioUpdateInput = {
    NOME?: StringFieldUpdateOperationsInput | string
    DATANASC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TIPOPESSOA?: StringFieldUpdateOperationsInput | string
    GENERO?: NullableStringFieldUpdateOperationsInput | string | null
    CPF?: NullableStringFieldUpdateOperationsInput | string | null
    RG?: NullableStringFieldUpdateOperationsInput | string | null
    CNPJ?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO1?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO2?: NullableStringFieldUpdateOperationsInput | string | null
    CEP?: NullableStringFieldUpdateOperationsInput | string | null
    LOGRADOUDO?: NullableStringFieldUpdateOperationsInput | string | null
    NUMERO?: NullableStringFieldUpdateOperationsInput | string | null
    COMPLEMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    BAIRRO?: NullableStringFieldUpdateOperationsInput | string | null
    CIDADE?: NullableStringFieldUpdateOperationsInput | string | null
    SIGLAESTADO?: NullableStringFieldUpdateOperationsInput | string | null
    OBSERVACOES?: NullableStringFieldUpdateOperationsInput | string | null
    DATACAD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ATIVO?: BoolFieldUpdateOperationsInput | boolean
  }

  export type beneficiarioUncheckedUpdateInput = {
    IDBENEFICIARIO?: IntFieldUpdateOperationsInput | number
    NOME?: StringFieldUpdateOperationsInput | string
    DATANASC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TIPOPESSOA?: StringFieldUpdateOperationsInput | string
    GENERO?: NullableStringFieldUpdateOperationsInput | string | null
    CPF?: NullableStringFieldUpdateOperationsInput | string | null
    RG?: NullableStringFieldUpdateOperationsInput | string | null
    CNPJ?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO1?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO2?: NullableStringFieldUpdateOperationsInput | string | null
    CEP?: NullableStringFieldUpdateOperationsInput | string | null
    LOGRADOUDO?: NullableStringFieldUpdateOperationsInput | string | null
    NUMERO?: NullableStringFieldUpdateOperationsInput | string | null
    COMPLEMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    BAIRRO?: NullableStringFieldUpdateOperationsInput | string | null
    CIDADE?: NullableStringFieldUpdateOperationsInput | string | null
    SIGLAESTADO?: NullableStringFieldUpdateOperationsInput | string | null
    OBSERVACOES?: NullableStringFieldUpdateOperationsInput | string | null
    DATACAD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ATIVO?: BoolFieldUpdateOperationsInput | boolean
  }

  export type beneficiarioCreateManyInput = {
    IDBENEFICIARIO?: number
    NOME: string
    DATANASC?: Date | string | null
    TIPOPESSOA?: string
    GENERO?: string | null
    CPF?: string | null
    RG?: string | null
    CNPJ?: string | null
    CONTATO1?: string | null
    CONTATO2?: string | null
    CEP?: string | null
    LOGRADOUDO?: string | null
    NUMERO?: string | null
    COMPLEMENTO?: string | null
    BAIRRO?: string | null
    CIDADE?: string | null
    SIGLAESTADO?: string | null
    OBSERVACOES?: string | null
    DATACAD?: Date | string | null
    ATIVO: boolean
  }

  export type beneficiarioUpdateManyMutationInput = {
    NOME?: StringFieldUpdateOperationsInput | string
    DATANASC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TIPOPESSOA?: StringFieldUpdateOperationsInput | string
    GENERO?: NullableStringFieldUpdateOperationsInput | string | null
    CPF?: NullableStringFieldUpdateOperationsInput | string | null
    RG?: NullableStringFieldUpdateOperationsInput | string | null
    CNPJ?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO1?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO2?: NullableStringFieldUpdateOperationsInput | string | null
    CEP?: NullableStringFieldUpdateOperationsInput | string | null
    LOGRADOUDO?: NullableStringFieldUpdateOperationsInput | string | null
    NUMERO?: NullableStringFieldUpdateOperationsInput | string | null
    COMPLEMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    BAIRRO?: NullableStringFieldUpdateOperationsInput | string | null
    CIDADE?: NullableStringFieldUpdateOperationsInput | string | null
    SIGLAESTADO?: NullableStringFieldUpdateOperationsInput | string | null
    OBSERVACOES?: NullableStringFieldUpdateOperationsInput | string | null
    DATACAD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ATIVO?: BoolFieldUpdateOperationsInput | boolean
  }

  export type beneficiarioUncheckedUpdateManyInput = {
    IDBENEFICIARIO?: IntFieldUpdateOperationsInput | number
    NOME?: StringFieldUpdateOperationsInput | string
    DATANASC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TIPOPESSOA?: StringFieldUpdateOperationsInput | string
    GENERO?: NullableStringFieldUpdateOperationsInput | string | null
    CPF?: NullableStringFieldUpdateOperationsInput | string | null
    RG?: NullableStringFieldUpdateOperationsInput | string | null
    CNPJ?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO1?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO2?: NullableStringFieldUpdateOperationsInput | string | null
    CEP?: NullableStringFieldUpdateOperationsInput | string | null
    LOGRADOUDO?: NullableStringFieldUpdateOperationsInput | string | null
    NUMERO?: NullableStringFieldUpdateOperationsInput | string | null
    COMPLEMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    BAIRRO?: NullableStringFieldUpdateOperationsInput | string | null
    CIDADE?: NullableStringFieldUpdateOperationsInput | string | null
    SIGLAESTADO?: NullableStringFieldUpdateOperationsInput | string | null
    OBSERVACOES?: NullableStringFieldUpdateOperationsInput | string | null
    DATACAD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ATIVO?: BoolFieldUpdateOperationsInput | boolean
  }

  export type doadorCreateInput = {
    NOME: string
    TIPOPESSOA?: string
    CPF?: string | null
    CNPJ?: string | null
    CONTATO1?: string | null
    CONTATO2?: string | null
    CEP?: string | null
    LOGRADOUDO?: string | null
    NUMERO?: string | null
    COMPLEMENTO?: string | null
    BAIRRO?: string | null
    CIDADE?: string | null
    SIGLAESTADO?: string | null
    OBSERVACOES?: string | null
    DATACAD?: Date | string | null
    ATIVO: boolean
  }

  export type doadorUncheckedCreateInput = {
    IDDOADOR?: number
    NOME: string
    TIPOPESSOA?: string
    CPF?: string | null
    CNPJ?: string | null
    CONTATO1?: string | null
    CONTATO2?: string | null
    CEP?: string | null
    LOGRADOUDO?: string | null
    NUMERO?: string | null
    COMPLEMENTO?: string | null
    BAIRRO?: string | null
    CIDADE?: string | null
    SIGLAESTADO?: string | null
    OBSERVACOES?: string | null
    DATACAD?: Date | string | null
    ATIVO: boolean
  }

  export type doadorUpdateInput = {
    NOME?: StringFieldUpdateOperationsInput | string
    TIPOPESSOA?: StringFieldUpdateOperationsInput | string
    CPF?: NullableStringFieldUpdateOperationsInput | string | null
    CNPJ?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO1?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO2?: NullableStringFieldUpdateOperationsInput | string | null
    CEP?: NullableStringFieldUpdateOperationsInput | string | null
    LOGRADOUDO?: NullableStringFieldUpdateOperationsInput | string | null
    NUMERO?: NullableStringFieldUpdateOperationsInput | string | null
    COMPLEMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    BAIRRO?: NullableStringFieldUpdateOperationsInput | string | null
    CIDADE?: NullableStringFieldUpdateOperationsInput | string | null
    SIGLAESTADO?: NullableStringFieldUpdateOperationsInput | string | null
    OBSERVACOES?: NullableStringFieldUpdateOperationsInput | string | null
    DATACAD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ATIVO?: BoolFieldUpdateOperationsInput | boolean
  }

  export type doadorUncheckedUpdateInput = {
    IDDOADOR?: IntFieldUpdateOperationsInput | number
    NOME?: StringFieldUpdateOperationsInput | string
    TIPOPESSOA?: StringFieldUpdateOperationsInput | string
    CPF?: NullableStringFieldUpdateOperationsInput | string | null
    CNPJ?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO1?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO2?: NullableStringFieldUpdateOperationsInput | string | null
    CEP?: NullableStringFieldUpdateOperationsInput | string | null
    LOGRADOUDO?: NullableStringFieldUpdateOperationsInput | string | null
    NUMERO?: NullableStringFieldUpdateOperationsInput | string | null
    COMPLEMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    BAIRRO?: NullableStringFieldUpdateOperationsInput | string | null
    CIDADE?: NullableStringFieldUpdateOperationsInput | string | null
    SIGLAESTADO?: NullableStringFieldUpdateOperationsInput | string | null
    OBSERVACOES?: NullableStringFieldUpdateOperationsInput | string | null
    DATACAD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ATIVO?: BoolFieldUpdateOperationsInput | boolean
  }

  export type doadorCreateManyInput = {
    IDDOADOR?: number
    NOME: string
    TIPOPESSOA?: string
    CPF?: string | null
    CNPJ?: string | null
    CONTATO1?: string | null
    CONTATO2?: string | null
    CEP?: string | null
    LOGRADOUDO?: string | null
    NUMERO?: string | null
    COMPLEMENTO?: string | null
    BAIRRO?: string | null
    CIDADE?: string | null
    SIGLAESTADO?: string | null
    OBSERVACOES?: string | null
    DATACAD?: Date | string | null
    ATIVO: boolean
  }

  export type doadorUpdateManyMutationInput = {
    NOME?: StringFieldUpdateOperationsInput | string
    TIPOPESSOA?: StringFieldUpdateOperationsInput | string
    CPF?: NullableStringFieldUpdateOperationsInput | string | null
    CNPJ?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO1?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO2?: NullableStringFieldUpdateOperationsInput | string | null
    CEP?: NullableStringFieldUpdateOperationsInput | string | null
    LOGRADOUDO?: NullableStringFieldUpdateOperationsInput | string | null
    NUMERO?: NullableStringFieldUpdateOperationsInput | string | null
    COMPLEMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    BAIRRO?: NullableStringFieldUpdateOperationsInput | string | null
    CIDADE?: NullableStringFieldUpdateOperationsInput | string | null
    SIGLAESTADO?: NullableStringFieldUpdateOperationsInput | string | null
    OBSERVACOES?: NullableStringFieldUpdateOperationsInput | string | null
    DATACAD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ATIVO?: BoolFieldUpdateOperationsInput | boolean
  }

  export type doadorUncheckedUpdateManyInput = {
    IDDOADOR?: IntFieldUpdateOperationsInput | number
    NOME?: StringFieldUpdateOperationsInput | string
    TIPOPESSOA?: StringFieldUpdateOperationsInput | string
    CPF?: NullableStringFieldUpdateOperationsInput | string | null
    CNPJ?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO1?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO2?: NullableStringFieldUpdateOperationsInput | string | null
    CEP?: NullableStringFieldUpdateOperationsInput | string | null
    LOGRADOUDO?: NullableStringFieldUpdateOperationsInput | string | null
    NUMERO?: NullableStringFieldUpdateOperationsInput | string | null
    COMPLEMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    BAIRRO?: NullableStringFieldUpdateOperationsInput | string | null
    CIDADE?: NullableStringFieldUpdateOperationsInput | string | null
    SIGLAESTADO?: NullableStringFieldUpdateOperationsInput | string | null
    OBSERVACOES?: NullableStringFieldUpdateOperationsInput | string | null
    DATACAD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ATIVO?: BoolFieldUpdateOperationsInput | boolean
  }

  export type empresaCreateInput = {
    NOMEFANTASIA: string
    RAZAOSOCIAL?: string | null
    CNPJ?: string | null
    CONTATO1?: string | null
    CONTATO2?: string | null
    CEP?: string | null
    LOGRADOURO?: string | null
    NUMERO?: string | null
    COMPLEMENTO?: string | null
    BAIRRO?: string | null
    CIDADE?: string | null
    SIGLAESTADO?: string | null
  }

  export type empresaUncheckedCreateInput = {
    IDEMPRESA?: number
    NOMEFANTASIA: string
    RAZAOSOCIAL?: string | null
    CNPJ?: string | null
    CONTATO1?: string | null
    CONTATO2?: string | null
    CEP?: string | null
    LOGRADOURO?: string | null
    NUMERO?: string | null
    COMPLEMENTO?: string | null
    BAIRRO?: string | null
    CIDADE?: string | null
    SIGLAESTADO?: string | null
  }

  export type empresaUpdateInput = {
    NOMEFANTASIA?: StringFieldUpdateOperationsInput | string
    RAZAOSOCIAL?: NullableStringFieldUpdateOperationsInput | string | null
    CNPJ?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO1?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO2?: NullableStringFieldUpdateOperationsInput | string | null
    CEP?: NullableStringFieldUpdateOperationsInput | string | null
    LOGRADOURO?: NullableStringFieldUpdateOperationsInput | string | null
    NUMERO?: NullableStringFieldUpdateOperationsInput | string | null
    COMPLEMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    BAIRRO?: NullableStringFieldUpdateOperationsInput | string | null
    CIDADE?: NullableStringFieldUpdateOperationsInput | string | null
    SIGLAESTADO?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type empresaUncheckedUpdateInput = {
    IDEMPRESA?: IntFieldUpdateOperationsInput | number
    NOMEFANTASIA?: StringFieldUpdateOperationsInput | string
    RAZAOSOCIAL?: NullableStringFieldUpdateOperationsInput | string | null
    CNPJ?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO1?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO2?: NullableStringFieldUpdateOperationsInput | string | null
    CEP?: NullableStringFieldUpdateOperationsInput | string | null
    LOGRADOURO?: NullableStringFieldUpdateOperationsInput | string | null
    NUMERO?: NullableStringFieldUpdateOperationsInput | string | null
    COMPLEMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    BAIRRO?: NullableStringFieldUpdateOperationsInput | string | null
    CIDADE?: NullableStringFieldUpdateOperationsInput | string | null
    SIGLAESTADO?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type empresaCreateManyInput = {
    IDEMPRESA?: number
    NOMEFANTASIA: string
    RAZAOSOCIAL?: string | null
    CNPJ?: string | null
    CONTATO1?: string | null
    CONTATO2?: string | null
    CEP?: string | null
    LOGRADOURO?: string | null
    NUMERO?: string | null
    COMPLEMENTO?: string | null
    BAIRRO?: string | null
    CIDADE?: string | null
    SIGLAESTADO?: string | null
  }

  export type empresaUpdateManyMutationInput = {
    NOMEFANTASIA?: StringFieldUpdateOperationsInput | string
    RAZAOSOCIAL?: NullableStringFieldUpdateOperationsInput | string | null
    CNPJ?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO1?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO2?: NullableStringFieldUpdateOperationsInput | string | null
    CEP?: NullableStringFieldUpdateOperationsInput | string | null
    LOGRADOURO?: NullableStringFieldUpdateOperationsInput | string | null
    NUMERO?: NullableStringFieldUpdateOperationsInput | string | null
    COMPLEMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    BAIRRO?: NullableStringFieldUpdateOperationsInput | string | null
    CIDADE?: NullableStringFieldUpdateOperationsInput | string | null
    SIGLAESTADO?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type empresaUncheckedUpdateManyInput = {
    IDEMPRESA?: IntFieldUpdateOperationsInput | number
    NOMEFANTASIA?: StringFieldUpdateOperationsInput | string
    RAZAOSOCIAL?: NullableStringFieldUpdateOperationsInput | string | null
    CNPJ?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO1?: NullableStringFieldUpdateOperationsInput | string | null
    CONTATO2?: NullableStringFieldUpdateOperationsInput | string | null
    CEP?: NullableStringFieldUpdateOperationsInput | string | null
    LOGRADOURO?: NullableStringFieldUpdateOperationsInput | string | null
    NUMERO?: NullableStringFieldUpdateOperationsInput | string | null
    COMPLEMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    BAIRRO?: NullableStringFieldUpdateOperationsInput | string | null
    CIDADE?: NullableStringFieldUpdateOperationsInput | string | null
    SIGLAESTADO?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tipodoacaoCreateInput = {
    DESCRICAO: string
    DATACAD?: Date | string | null
    ATIVO: boolean
  }

  export type tipodoacaoUncheckedCreateInput = {
    IDTIPODOACAO?: number
    DESCRICAO: string
    DATACAD?: Date | string | null
    ATIVO: boolean
  }

  export type tipodoacaoUpdateInput = {
    DESCRICAO?: StringFieldUpdateOperationsInput | string
    DATACAD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ATIVO?: BoolFieldUpdateOperationsInput | boolean
  }

  export type tipodoacaoUncheckedUpdateInput = {
    IDTIPODOACAO?: IntFieldUpdateOperationsInput | number
    DESCRICAO?: StringFieldUpdateOperationsInput | string
    DATACAD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ATIVO?: BoolFieldUpdateOperationsInput | boolean
  }

  export type tipodoacaoCreateManyInput = {
    IDTIPODOACAO?: number
    DESCRICAO: string
    DATACAD?: Date | string | null
    ATIVO: boolean
  }

  export type tipodoacaoUpdateManyMutationInput = {
    DESCRICAO?: StringFieldUpdateOperationsInput | string
    DATACAD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ATIVO?: BoolFieldUpdateOperationsInput | boolean
  }

  export type tipodoacaoUncheckedUpdateManyInput = {
    IDTIPODOACAO?: IntFieldUpdateOperationsInput | number
    DESCRICAO?: StringFieldUpdateOperationsInput | string
    DATACAD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ATIVO?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usuarioCreateInput = {
    USUARIO: string
    SENHA: string
    EMAIL?: string | null
    ROLE?: string | null
    DATACAD?: Date | string | null
    ATIVO: boolean
  }

  export type usuarioUncheckedCreateInput = {
    IDUSUARIO?: number
    USUARIO: string
    SENHA: string
    EMAIL?: string | null
    ROLE?: string | null
    DATACAD?: Date | string | null
    ATIVO: boolean
  }

  export type usuarioUpdateInput = {
    USUARIO?: StringFieldUpdateOperationsInput | string
    SENHA?: StringFieldUpdateOperationsInput | string
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    ROLE?: NullableStringFieldUpdateOperationsInput | string | null
    DATACAD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ATIVO?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usuarioUncheckedUpdateInput = {
    IDUSUARIO?: IntFieldUpdateOperationsInput | number
    USUARIO?: StringFieldUpdateOperationsInput | string
    SENHA?: StringFieldUpdateOperationsInput | string
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    ROLE?: NullableStringFieldUpdateOperationsInput | string | null
    DATACAD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ATIVO?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usuarioCreateManyInput = {
    IDUSUARIO?: number
    USUARIO: string
    SENHA: string
    EMAIL?: string | null
    ROLE?: string | null
    DATACAD?: Date | string | null
    ATIVO: boolean
  }

  export type usuarioUpdateManyMutationInput = {
    USUARIO?: StringFieldUpdateOperationsInput | string
    SENHA?: StringFieldUpdateOperationsInput | string
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    ROLE?: NullableStringFieldUpdateOperationsInput | string | null
    DATACAD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ATIVO?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usuarioUncheckedUpdateManyInput = {
    IDUSUARIO?: IntFieldUpdateOperationsInput | number
    USUARIO?: StringFieldUpdateOperationsInput | string
    SENHA?: StringFieldUpdateOperationsInput | string
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    ROLE?: NullableStringFieldUpdateOperationsInput | string | null
    DATACAD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ATIVO?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type beneficiarioCountOrderByAggregateInput = {
    IDBENEFICIARIO?: SortOrder
    NOME?: SortOrder
    DATANASC?: SortOrder
    TIPOPESSOA?: SortOrder
    GENERO?: SortOrder
    CPF?: SortOrder
    RG?: SortOrder
    CNPJ?: SortOrder
    CONTATO1?: SortOrder
    CONTATO2?: SortOrder
    CEP?: SortOrder
    LOGRADOUDO?: SortOrder
    NUMERO?: SortOrder
    COMPLEMENTO?: SortOrder
    BAIRRO?: SortOrder
    CIDADE?: SortOrder
    SIGLAESTADO?: SortOrder
    OBSERVACOES?: SortOrder
    DATACAD?: SortOrder
    ATIVO?: SortOrder
  }

  export type beneficiarioAvgOrderByAggregateInput = {
    IDBENEFICIARIO?: SortOrder
  }

  export type beneficiarioMaxOrderByAggregateInput = {
    IDBENEFICIARIO?: SortOrder
    NOME?: SortOrder
    DATANASC?: SortOrder
    TIPOPESSOA?: SortOrder
    GENERO?: SortOrder
    CPF?: SortOrder
    RG?: SortOrder
    CNPJ?: SortOrder
    CONTATO1?: SortOrder
    CONTATO2?: SortOrder
    CEP?: SortOrder
    LOGRADOUDO?: SortOrder
    NUMERO?: SortOrder
    COMPLEMENTO?: SortOrder
    BAIRRO?: SortOrder
    CIDADE?: SortOrder
    SIGLAESTADO?: SortOrder
    OBSERVACOES?: SortOrder
    DATACAD?: SortOrder
    ATIVO?: SortOrder
  }

  export type beneficiarioMinOrderByAggregateInput = {
    IDBENEFICIARIO?: SortOrder
    NOME?: SortOrder
    DATANASC?: SortOrder
    TIPOPESSOA?: SortOrder
    GENERO?: SortOrder
    CPF?: SortOrder
    RG?: SortOrder
    CNPJ?: SortOrder
    CONTATO1?: SortOrder
    CONTATO2?: SortOrder
    CEP?: SortOrder
    LOGRADOUDO?: SortOrder
    NUMERO?: SortOrder
    COMPLEMENTO?: SortOrder
    BAIRRO?: SortOrder
    CIDADE?: SortOrder
    SIGLAESTADO?: SortOrder
    OBSERVACOES?: SortOrder
    DATACAD?: SortOrder
    ATIVO?: SortOrder
  }

  export type beneficiarioSumOrderByAggregateInput = {
    IDBENEFICIARIO?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type doadorCountOrderByAggregateInput = {
    IDDOADOR?: SortOrder
    NOME?: SortOrder
    TIPOPESSOA?: SortOrder
    CPF?: SortOrder
    CNPJ?: SortOrder
    CONTATO1?: SortOrder
    CONTATO2?: SortOrder
    CEP?: SortOrder
    LOGRADOUDO?: SortOrder
    NUMERO?: SortOrder
    COMPLEMENTO?: SortOrder
    BAIRRO?: SortOrder
    CIDADE?: SortOrder
    SIGLAESTADO?: SortOrder
    OBSERVACOES?: SortOrder
    DATACAD?: SortOrder
    ATIVO?: SortOrder
  }

  export type doadorAvgOrderByAggregateInput = {
    IDDOADOR?: SortOrder
  }

  export type doadorMaxOrderByAggregateInput = {
    IDDOADOR?: SortOrder
    NOME?: SortOrder
    TIPOPESSOA?: SortOrder
    CPF?: SortOrder
    CNPJ?: SortOrder
    CONTATO1?: SortOrder
    CONTATO2?: SortOrder
    CEP?: SortOrder
    LOGRADOUDO?: SortOrder
    NUMERO?: SortOrder
    COMPLEMENTO?: SortOrder
    BAIRRO?: SortOrder
    CIDADE?: SortOrder
    SIGLAESTADO?: SortOrder
    OBSERVACOES?: SortOrder
    DATACAD?: SortOrder
    ATIVO?: SortOrder
  }

  export type doadorMinOrderByAggregateInput = {
    IDDOADOR?: SortOrder
    NOME?: SortOrder
    TIPOPESSOA?: SortOrder
    CPF?: SortOrder
    CNPJ?: SortOrder
    CONTATO1?: SortOrder
    CONTATO2?: SortOrder
    CEP?: SortOrder
    LOGRADOUDO?: SortOrder
    NUMERO?: SortOrder
    COMPLEMENTO?: SortOrder
    BAIRRO?: SortOrder
    CIDADE?: SortOrder
    SIGLAESTADO?: SortOrder
    OBSERVACOES?: SortOrder
    DATACAD?: SortOrder
    ATIVO?: SortOrder
  }

  export type doadorSumOrderByAggregateInput = {
    IDDOADOR?: SortOrder
  }

  export type empresaCountOrderByAggregateInput = {
    IDEMPRESA?: SortOrder
    NOMEFANTASIA?: SortOrder
    RAZAOSOCIAL?: SortOrder
    CNPJ?: SortOrder
    CONTATO1?: SortOrder
    CONTATO2?: SortOrder
    CEP?: SortOrder
    LOGRADOURO?: SortOrder
    NUMERO?: SortOrder
    COMPLEMENTO?: SortOrder
    BAIRRO?: SortOrder
    CIDADE?: SortOrder
    SIGLAESTADO?: SortOrder
  }

  export type empresaAvgOrderByAggregateInput = {
    IDEMPRESA?: SortOrder
  }

  export type empresaMaxOrderByAggregateInput = {
    IDEMPRESA?: SortOrder
    NOMEFANTASIA?: SortOrder
    RAZAOSOCIAL?: SortOrder
    CNPJ?: SortOrder
    CONTATO1?: SortOrder
    CONTATO2?: SortOrder
    CEP?: SortOrder
    LOGRADOURO?: SortOrder
    NUMERO?: SortOrder
    COMPLEMENTO?: SortOrder
    BAIRRO?: SortOrder
    CIDADE?: SortOrder
    SIGLAESTADO?: SortOrder
  }

  export type empresaMinOrderByAggregateInput = {
    IDEMPRESA?: SortOrder
    NOMEFANTASIA?: SortOrder
    RAZAOSOCIAL?: SortOrder
    CNPJ?: SortOrder
    CONTATO1?: SortOrder
    CONTATO2?: SortOrder
    CEP?: SortOrder
    LOGRADOURO?: SortOrder
    NUMERO?: SortOrder
    COMPLEMENTO?: SortOrder
    BAIRRO?: SortOrder
    CIDADE?: SortOrder
    SIGLAESTADO?: SortOrder
  }

  export type empresaSumOrderByAggregateInput = {
    IDEMPRESA?: SortOrder
  }

  export type tipodoacaoCountOrderByAggregateInput = {
    IDTIPODOACAO?: SortOrder
    DESCRICAO?: SortOrder
    DATACAD?: SortOrder
    ATIVO?: SortOrder
  }

  export type tipodoacaoAvgOrderByAggregateInput = {
    IDTIPODOACAO?: SortOrder
  }

  export type tipodoacaoMaxOrderByAggregateInput = {
    IDTIPODOACAO?: SortOrder
    DESCRICAO?: SortOrder
    DATACAD?: SortOrder
    ATIVO?: SortOrder
  }

  export type tipodoacaoMinOrderByAggregateInput = {
    IDTIPODOACAO?: SortOrder
    DESCRICAO?: SortOrder
    DATACAD?: SortOrder
    ATIVO?: SortOrder
  }

  export type tipodoacaoSumOrderByAggregateInput = {
    IDTIPODOACAO?: SortOrder
  }

  export type usuarioCountOrderByAggregateInput = {
    IDUSUARIO?: SortOrder
    USUARIO?: SortOrder
    SENHA?: SortOrder
    EMAIL?: SortOrder
    ROLE?: SortOrder
    DATACAD?: SortOrder
    ATIVO?: SortOrder
  }

  export type usuarioAvgOrderByAggregateInput = {
    IDUSUARIO?: SortOrder
  }

  export type usuarioMaxOrderByAggregateInput = {
    IDUSUARIO?: SortOrder
    USUARIO?: SortOrder
    SENHA?: SortOrder
    EMAIL?: SortOrder
    ROLE?: SortOrder
    DATACAD?: SortOrder
    ATIVO?: SortOrder
  }

  export type usuarioMinOrderByAggregateInput = {
    IDUSUARIO?: SortOrder
    USUARIO?: SortOrder
    SENHA?: SortOrder
    EMAIL?: SortOrder
    ROLE?: SortOrder
    DATACAD?: SortOrder
    ATIVO?: SortOrder
  }

  export type usuarioSumOrderByAggregateInput = {
    IDUSUARIO?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use beneficiarioDefaultArgs instead
     */
    export type beneficiarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = beneficiarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use doadorDefaultArgs instead
     */
    export type doadorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = doadorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use empresaDefaultArgs instead
     */
    export type empresaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = empresaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use tipodoacaoDefaultArgs instead
     */
    export type tipodoacaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = tipodoacaoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usuarioDefaultArgs instead
     */
    export type usuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usuarioDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}